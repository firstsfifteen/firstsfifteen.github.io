<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一杆_梅子酒</title>
  
  <subtitle>Yang-Jie&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://firstsfifteen.github.io/"/>
  <updated>2019-05-22T08:22:33.487Z</updated>
  <id>https://firstsfifteen.github.io/</id>
  
  <author>
    <name>firstsfifteen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java关键字及其作用</title>
    <link href="https://firstsfifteen.github.io/2019/05/22/java%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/"/>
    <id>https://firstsfifteen.github.io/2019/05/22/java关键字及其作用/</id>
    <published>2019-05-22T08:20:44.127Z</published>
    <updated>2019-05-22T08:22:33.487Z</updated>
    
    <content type="html"><![CDATA[<p>Java关键字是<a href="https://baike.baidu.com/item/电脑语言/7105622" target="_blank" rel="noopener">电脑语言</a>里事先定义的，有特别意义的标识符，有时又叫<a href="https://baike.baidu.com/item/保留字/7674788" target="_blank" rel="noopener">保留字</a>，还有特别意义的变量。Java的关键字对Java的<a href="https://baike.baidu.com/item/编译器/8853067" target="_blank" rel="noopener">编译器</a>有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名和参数。</p><h2 id="关键字总览"><a href="#关键字总览" class="headerlink" title="关键字总览:"></a>关键字总览:</h2><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g3a67l368zj30pt0hct8x" alt></p><h2 id="大致含义"><a href="#大致含义" class="headerlink" title="大致含义"></a>大致含义</h2><table><thead><tr><th><strong>关键字</strong></th><th style="text-align:left"><strong>含义</strong></th></tr></thead><tbody><tr><td>abstract</td><td style="text-align:left">表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td style="text-align:left">断言，用来进行程序调试</td></tr><tr><td>boolean</td><td style="text-align:left">基本数据类型之一，声明布尔类型的关键字</td></tr><tr><td>break</td><td style="text-align:left">提前跳出一个块</td></tr><tr><td>byte</td><td style="text-align:left">基本数据类型之一，字节类型</td></tr><tr><td>case</td><td style="text-align:left">用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td style="text-align:left">用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td style="text-align:left">基本数据类型之一，字符类型</td></tr><tr><td>class</td><td style="text-align:left">声明一个类</td></tr><tr><td>const</td><td style="text-align:left">保留关键字，没有具体含义</td></tr><tr><td>continue</td><td style="text-align:left">回到一个块的开始处</td></tr><tr><td>default</td><td style="text-align:left">默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td style="text-align:left">用在do-while循环结构中</td></tr><tr><td>double</td><td style="text-align:left">基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td style="text-align:left">用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td style="text-align:left">枚举</td></tr><tr><td>extends</td><td style="text-align:left">表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td style="text-align:left">用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td style="text-align:left">用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td style="text-align:left">基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td style="text-align:left">一种循环结构的引导词</td></tr><tr><td>goto</td><td style="text-align:left">保留关键字，没有具体含义</td></tr><tr><td>if</td><td style="text-align:left">条件语句的引导词</td></tr><tr><td>implements</td><td style="text-align:left">表明一个类实现了给定的接口</td></tr><tr><td>import</td><td style="text-align:left">表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td style="text-align:left">用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td style="text-align:left">基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td style="text-align:left">接口</td></tr><tr><td>long</td><td style="text-align:left">基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td style="text-align:left">用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td style="text-align:left">用来创建新实例对象</td></tr><tr><td>package</td><td style="text-align:left">包</td></tr><tr><td>private</td><td style="text-align:left">一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td style="text-align:left">一种访问控制方式：保护模式</td></tr><tr><td>public</td><td style="text-align:left">一种访问控制方式：共用模式</td></tr><tr><td>return</td><td style="text-align:left">从成员方法中返回数据</td></tr><tr><td>short</td><td style="text-align:left">基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td style="text-align:left">表明具有静态属性</td></tr><tr><td>strictfp</td><td style="text-align:left">用来声明FP_strict（单精度或双精度浮点数）表达式遵循<a href="https://baike.baidu.com/item/IEEE 754" target="_blank" rel="noopener">IEEE 754</a>算术规范 [1]</td></tr><tr><td>super</td><td style="text-align:left">表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td style="text-align:left">分支语句结构的引导词</td></tr><tr><td>synchronized</td><td style="text-align:left">表明一段代码需要同步执行</td></tr><tr><td>this</td><td style="text-align:left">指向当前实例对象的引用</td></tr><tr><td>throw</td><td style="text-align:left">抛出一个异常</td></tr><tr><td>throws</td><td style="text-align:left">声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td style="text-align:left">声明不用序列化的成员域</td></tr><tr><td>try</td><td style="text-align:left">尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td style="text-align:left">声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td style="text-align:left">表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td style="text-align:left">用在循环结构中</td></tr></tbody></table><h2 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h2><h2 id="1-访问控制"><a href="#1-访问控制" class="headerlink" title="1. 访问控制"></a>1. 访问控制</h2><h4 id="1-private-私有的"><a href="#1-private-私有的" class="headerlink" title="1) private 私有的"></a>1) private 私有的</h4><p>private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 只能在声明 private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 </p><h4 id="2-protected-受保护的"><a href="#2-protected-受保护的" class="headerlink" title="2) protected 受保护的"></a>2) protected 受保护的</h4><p>protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明 protected 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p><h4 id="3-public-公共的"><a href="#3-public-公共的" class="headerlink" title="3) public 公共的"></a>3) public 公共的</h4><p>public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 可能只会在其他任何类或包中引用 public 类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p><h3 id="2-类、方法和变量修饰符"><a href="#2-类、方法和变量修饰符" class="headerlink" title="2. 类、方法和变量修饰符"></a>2. 类、方法和变量修饰符</h3><h4 id="1-abstract-声明抽象"><a href="#1-abstract-声明抽象" class="headerlink" title="1) abstract 声明抽象"></a>1) abstract 声明抽象</h4><p>abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用 abstract方法的类本来就是抽象类，并且必须声明为abstract。</p><h4 id="2-class类"><a href="#2-class类" class="headerlink" title="2) class类"></a>2) class类</h4><p>class 关键字用来声明新的 <a href="http://lib.csdn.net/base/17" target="_blank" rel="noopener">Java</a> 类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p><h4 id="3-extends-继承、扩展"><a href="#3-extends-继承、扩展" class="headerlink" title="3) extends 继承、扩展"></a>3) extends 继承、扩展</h4><p>extends 关键字用在 class 或 interface 声明中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。</p><h4 id="4-final-最终、不可改变"><a href="#4-final-最终、不可改变" class="headerlink" title="4) final 最终、不可改变"></a>4) final 最终、不可改变</h4><p>final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是 abstract 又是 final。abstract 意味着必须扩展类，final 意味着不能扩展类。一个方法不能同时是 abstract 又是 final。abstract 意味着必须重写方法，final 意味着不能重写方法。</p><h4 id="5-implements实现"><a href="#5-implements实现" class="headerlink" title="5) implements实现"></a>5) implements实现</h4><p>implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。</p><h4 id="6-interface-接口"><a href="#6-interface-接口" class="headerlink" title="6) interface 接口"></a>6) interface 接口</h4><p>interface 关键字用来声明新的 Java 接口，接口是方法的集合。</p><p>接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。 </p><p>实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。</p><h4 id="7-native-本地"><a href="#7-native-本地" class="headerlink" title="7) native 本地"></a>7) native 本地</h4><p>native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。</p><h4 id="8-new-新-创建"><a href="#8-new-新-创建" class="headerlink" title="8) new 新,创建"></a>8) new 新,创建</h4><p>new 关键字用于创建类的新实例。 </p><p>new 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。 </p><p>参数集合必须与类的构造方法的签名匹配。 </p><p>= 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。</p><h4 id="9-static-静态"><a href="#9-static-静态" class="headerlink" title="9) static 静态"></a>9) static 静态</h4><p>static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 </p><p>通常，static 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。</p><p>static（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的示例中，另一个类中的代码可以实例化 MyStaticClass 类，方法是用包含它的类名来限定其名称，如 MyClass.MyStaticClass。 </p><p>static 字段（类的成员变量）在类的所有实例中只存在一次。 </p><p>可以从类的外部调用 static 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。</p><p>模式：public final static <type> varName = <value>; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的示例中，另一个类可以用 MyClass.MAX_OBJECTS 形式来引用 MAX_OBJECTS 常量。</value></type></p><h4 id="10-strictfp-严格-精准"><a href="#10-strictfp-严格-精准" class="headerlink" title="10) strictfp 严格,精准"></a>10) strictfp 严格,精准</h4><p>strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。</p><p>可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字</p><h4 id="11-synchronized线程、同步"><a href="#11-synchronized线程、同步" class="headerlink" title="11) synchronized线程、同步"></a>11) synchronized线程、同步</h4><p>synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 </p><p>synchronized 关键字可防止代码的关键代码段一次被多个线程执行。 </p><p>如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。 </p><p>如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。 </p><p>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</p><h4 id="12-transient-短暂"><a href="#12-transient-短暂" class="headerlink" title="12) transient 短暂"></a>12) transient 短暂</h4><p>transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。</p><p>当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。</p><p>Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。<br>     transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。</p><h4 id="13-volatile-易失"><a href="#13-volatile-易失" class="headerlink" title="13) volatile 易失"></a>13) volatile 易失</h4><p>volatile 关键字用于表示可以被多个线程异步修改的成员变量。 </p><p>注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。</p><p>Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分</p><h3 id="3-程序控制语句"><a href="#3-程序控制语句" class="headerlink" title="3. 程序控制语句"></a>3. 程序控制语句</h3><h4 id="1-break-跳出，中断"><a href="#1-break-跳出，中断" class="headerlink" title="1) break 跳出，中断"></a>1) break 跳出，中断</h4><p>break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 </p><p>break 总是退出最深层的 while、for、do 或 switch 语句 </p><h4 id="2-continue-继续"><a href="#2-continue-继续" class="headerlink" title="2) continue 继续"></a>2) continue 继续</h4><p>continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 </p><p>continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。</p><h4 id="3-return-返回"><a href="#3-return-返回" class="headerlink" title="3) return 返回"></a>3) return 返回</h4><p>return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 </p><p>如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。 </p><p>返回值两侧的括号是可选的。</p><h4 id="4-do-运行"><a href="#4-do-运行" class="headerlink" title="4) do 运行"></a>4) do 运行</h4><p>do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 </p><p>do 循环体至少执行一次。 </p><p>条件表达式后面必须有分号。</p><h4 id="5-while-循环"><a href="#5-while-循环" class="headerlink" title="5) while 循环"></a>5) while 循环</h4><p>while 关键字用于指定一个只要条件为真就会重复的循环。</p><h4 id="6-if-如果"><a href="#6-if-如果" class="headerlink" title="6) if 如果"></a>6) if 如果</h4><p>if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。 </p><p>if 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。 </p><p>包含 boolean 操作数的表达式只能包含 boolean 操作数。</p><h4 id="7-else-否则"><a href="#7-else-否则" class="headerlink" title="7) else 否则"></a>7) else 否则</h4><p>else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。</p><h4 id="8-for-循环"><a href="#8-for-循环" class="headerlink" title="8) for 循环"></a>8) for 循环</h4><p>for 关键字用于指定一个在每次迭代结束前检查其条件的循环。 </p><p>for 语句的形式为 for(initialize; condition; increment) </p><p>控件流进入 for 语句时，将执行一次 initialize 语句。 </p><p>每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。 </p><p>每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。</p><h4 id="9-instanceof-实例"><a href="#9-instanceof-实例" class="headerlink" title="9) instanceof 实例"></a>9) instanceof 实例</h4><p>instanceof 关键字用来确定对象所属的类。</p><h4 id="10-switch-观察"><a href="#10-switch-观察" class="headerlink" title="10) switch 观察"></a>10) switch 观察</h4><p>switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 </p><p>switch 条件的计算结果必须等于 byte、char、short 或 int。 </p><p>case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。 </p><p>如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。</p><h4 id="11-case-返回观察里的结果"><a href="#11-case-返回观察里的结果" class="headerlink" title="11) case 返回观察里的结果"></a>11) case 返回观察里的结果</h4><p>case 用来标记 switch 语句中的每个分支。 </p><p>case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。 </p><p>如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。</p><h4 id="12-default-默认"><a href="#12-default-默认" class="headerlink" title="12) default 默认"></a>12) default 默认</h4><p>default 关键字用来标记 switch 语句中的默认分支。 </p><p>default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。 </p><p>如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。</p><h3 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h3><h4 id="1-try-捕获异常"><a href="#1-try-捕获异常" class="headerlink" title="1) try 捕获异常"></a>1) try 捕获异常</h4><p>try 关键字用于包含可能引发异常的语句块。 </p><p>每个 try 块都必须至少有一个 catch 或 finally 子句。 </p><p>如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。</p><h4 id="2-catch-处理异常"><a href="#2-catch-处理异常" class="headerlink" title="2) catch 处理异常"></a>2) catch 处理异常</h4><p>catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 </p><p>开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。 </p><p>每个 try 块都必须至少有一个 catch 或 finally 子句。 </p><p>如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息</p><h4 id="3-throw-抛出一个异常对象"><a href="#3-throw-抛出一个异常对象" class="headerlink" title="3) throw 抛出一个异常对象"></a>3) throw 抛出一个异常对象</h4><p>throw 关键字用于引发异常。 </p><p>throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。 </p><p>引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。</p><h4 id="4-throws-声明一个异常可能被抛出"><a href="#4-throws-声明一个异常可能被抛出" class="headerlink" title="4) throws 声明一个异常可能被抛出"></a>4) throws 声明一个异常可能被抛出</h4><p>throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 </p><p>throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。 </p><p>引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。 </p><p>要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。 </p><h3 id="5-包相关"><a href="#5-包相关" class="headerlink" title="5. 包相关"></a>5. 包相关</h3><h4 id="1-import-引入"><a href="#1-import-引入" class="headerlink" title="1) import 引入"></a>1) import 引入</h4><p>import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。 </p><p>当多个包包含同名的类时，许多 Java 程序员只使用特定的 import 语句（没有“*”）来避免不确定性。</p><h4 id="2-package-包"><a href="#2-package-包" class="headerlink" title="2) package 包"></a>2) package 包</h4><p>package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。 </p><p>package 语句（如果出现）必须是 Java 源文件中的第一个非注释性文本。 </p><p>例:java.lang.Object。 </p><p>如果 Java 源文件不包含 package 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。</p><h3 id="6-基本类型"><a href="#6-基本类型" class="headerlink" title="6. 基本类型"></a>6. 基本类型</h3><h4 id="1-boolean-布尔型"><a href="#1-boolean-布尔型" class="headerlink" title="1) boolean 布尔型"></a>1) boolean 布尔型</h4><p>boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。 </p><p>boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。 </p><p>包含 boolean 操作数的表达式只能包含 boolean 操作数。 </p><p>Boolean 类是 boolean 原始类型的包装对象类。</p><h4 id="2-byte-字节型"><a href="#2-byte-字节型" class="headerlink" title="2) byte 字节型"></a>2) byte 字节型</h4><p>byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。 </p><p>Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 </p><p>Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。</p><h4 id="3-char-字符型"><a href="#3-char-字符型" class="headerlink" title="3) char 字符型"></a>3) char 字符型</h4><p>char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。 </p><p>可以使用下列 char 常量：\b - 空格, \f - 换页, \n - 换行, \r - 回车, \t - 水平制表符, \’ - 单引号, \” - 双引号, \ - 反斜杠, \xxx - 采用 xxx 编码的 Latin-1 字符。\x 和 \xx 均为合法形式，但可能引起混淆。 \uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。 </p><p>Character 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。 </p><p>char 值没有符号。</p><h4 id="4-double-双精度"><a href="#4-double-双精度" class="headerlink" title="4) double 双精度"></a>4) double 双精度</h4><p>double 是 Java 原始类型。double 变量可以存储双精度浮点值。 </p><p>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 </p><p>Java 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。</p><h4 id="5-float-浮点"><a href="#5-float-浮点" class="headerlink" title="5) float 浮点"></a>5) float 浮点</h4><p>float 是 Java 原始类型。float 变量可以存储单精度浮点值。 </p><p>使用此关键字时应遵循下列规则： </p><p>Java 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。 </p><p>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 </p><p>Java 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。</p><h4 id="6-int-整型"><a href="#6-int-整型" class="headerlink" title="6) int 整型"></a>6) int 整型</h4><p>int 是 Java 原始类型。int 变量可以存储 32 位的整数值。 </p><p>Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 </p><p>Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。</p><h4 id="7-long-长整型"><a href="#7-long-长整型" class="headerlink" title="7) long 长整型"></a>7) long 长整型</h4><p>long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。 </p><p>Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 </p><p>Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。</p><h4 id="8-short-短整型"><a href="#8-short-短整型" class="headerlink" title="8) short 短整型"></a>8) short 短整型</h4><p>short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。 </p><p>Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 </p><p>Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。</p><h4 id="9-null-空"><a href="#9-null-空" class="headerlink" title="9) null 空"></a>9) null 空</h4><p>null 是 Java 的保留字，表示无值。 </p><p>将 null 赋给非原始变量相当于释放该变量先前所引用的对象。 </p><p>不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。</p><h4 id="10-true-真"><a href="#10-true-真" class="headerlink" title="10) true 真"></a>10) true 真</h4><p>true 关键字表示 boolean 变量的两个合法值中的一个。</p><h4 id="11-false-假"><a href="#11-false-假" class="headerlink" title="11) false 假"></a>11) false 假</h4><p>false 关键字代表 boolean 变量的两个合法值之一。</p><h3 id="7-变量引用"><a href="#7-变量引用" class="headerlink" title="7. 变量引用"></a>7. 变量引用</h3><h4 id="1-super-父类-超类"><a href="#1-super-父类-超类" class="headerlink" title="1) super 父类,超类"></a>1) super 父类,超类</h4><p>super 关键字用于引用使用该关键字的类的超类。 </p><p>作为独立语句出现的 super 表示调用超类的构造方法。 </p><p>super.<methodname>() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。</methodname></p><h4 id="2-this-本类"><a href="#2-this-本类" class="headerlink" title="2) this 本类"></a>2) this 本类</h4><p>this 关键字用于引用当前实例。 </p><p>当引用可能不明确时，可以使用 this 关键字来引用当前的实例。</p><h4 id="3-void-无返回值"><a href="#3-void-无返回值" class="headerlink" title="3) void 无返回值"></a>3) void 无返回值</h4><p>void 关键字表示 null 类型。 </p><p>void 可以用作方法的返回类型，以指示该方法不返回值。</p><h3 id="8-保留字"><a href="#8-保留字" class="headerlink" title="8. 保留字"></a>8. 保留字</h3><p>正确识别java语言的关键字（keyword）和保留字（reserved word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。</p><p>识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。<br>const和goto是java的保留字。 所有的关键字都是小写 </p><h4 id="1-goto-跳转"><a href="#1-goto-跳转" class="headerlink" title="1) goto 跳转"></a>1) goto 跳转</h4><p>goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。</p><h4 id="2-const-静态"><a href="#2-const-静态" class="headerlink" title="2) const 静态"></a>2) const 静态</h4><p>const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。</p><h4 id="3-native-本地"><a href="#3-native-本地" class="headerlink" title="3) native 本地"></a>3) native 本地</h4><p>Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。 </p><p>　　可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤： </p><p>　　１、在Java中声明native()方法，然后编译； </p><p>　　２、用javah产生一个.h文件； </p><p>　　３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）； </p><p>　　４、将第三步的.cpp文件编译成动态链接库文件； </p><p>　　５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。 </p><h3 id="Java关键字"><a href="#Java关键字" class="headerlink" title="Java关键字"></a>Java关键字</h3><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>abstract关键字可以修改类或方法。</p><p>abstract类可以扩展（增加子类），但不能直接实例化。</p><p>abstract方法不在声明它的类中实现，但必须在某个子类中重写。</p><p>-示例-</p><p>public abstract class MyClass{}</p><p>public abstract String myMethod();</p><p>-注释-</p><p>采用abstract方法的类本来就是抽象类，并且必须声明为abstract。</p><p>abstract类不能实例化。</p><p>仅当abstract类的子类实现其超类的所有abstract方法时，才能实例化abstract类的子类。这种类称为具体类，以区别于abstract类。</p><p>如果abstract类的子类没有实现其超类的所有abstract方法，该子类也是abstract类。</p><p>abstract关键字不能应用于static、private或final方法，因为这些方法不能被重写，因此，不能在子类中实现。</p><p>final类的方法都不能是abstract，因为final类不能有子类。</p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>boolean变量的值可以是true或false。</p><p>-示例-</p><p>boolean valid=true;</p><p>if(valid){</p><p><statement>}</statement></p><p>-注释-</p><p>boolean变量只能以true或false作为值。</p><p>boolean不能与数字类型相互转换。</p><p>包含boolean操作数的表达式只能包含boolean操作数。</p><p>Boolean类是boolean原始类型的包装对象类。</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>用于提前退出for、while或do循环，或者在switch语句中用来结束case块。</p><p>-示例-</p><p>for(i=0;i&lt;max;i++){</p><p>if(<loopfinishedearly>){</loopfinishedearly></p><p>break;}}</p><p>inttype=<somevalue>;</somevalue></p><p>switch(type){</p><p>case1:<statement></statement></p><p>break;</p><p>case2:<statement></statement></p><p>break;</p><p>default:</p><p><statement>}</statement></p><p>-注释-</p><p>break总是退出最深层的while、for、do或switch语句。</p><h3 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h3><p>byte是Java原始类型。</p><p>byte可存储在[-128,127]范围以内的整数值。</p><p>-示例-</p><p>byteb=124;</p><p>-注释-</p><p>Byte类是byte原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。</p><p>Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。</p><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>用来标记switch语句中的每个分支。</p><p>-示例-</p><p>intarg=<somevalue>;</somevalue></p><p>switch(arg){</p><p>case1:<statements></statements></p><p>break;</p><p>case2:<statements></statements></p><p>break;</p><p>default:</p><statements><p>break;}</p><p>-注释-</p><p>case块没有隐式结束点。break语句通常在每个case块末尾使用，用于退出switch语句。</p><p>如果没有break语句，执行流将进入所有后面的case和/或default块。</p><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p>catch关键字用来在try-catch或try-catch-finally语句中定义异常处理块。</p><p>-示例-</p><p>try{</p><p>&lt;可能引发异常的块&gt;</p><p>}</p><p>catch(&lt;java.lang.Exception或子类&gt;e){</p><p>&lt;处理异常e的代码&gt;</p><p>}</p><p>try{</p><p>&lt;可能引发其他异常的块&gt;</p><p>}</p><p>catch(FooExceptione){</p><p>&lt;处理FooExceptione的代码&gt;</p><p>}</p><p>catch(BarExceptione){</p><p>&lt;处理BarExceptione的代码&gt;</p><p>}</p><p>try{</p><p>&lt;可能引发异常的块&gt;</p><p>}</p><p>catch(&lt;java.lang.Exception或子类&gt;e){</p><p>&lt;处理异常e的代码&gt;</p><p>}</p><p>finally{</p><p>&lt;有异常或无异常情况下都执行的语句&gt;</p><p>}</p><p>-注释-</p><p>开始和结束标记{和}是catch子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。</p><p>每个try块都必须至少有一个catch或finally子句。</p><p>如果某个特定异常类未被任何catch子句处理，该异常将沿着调用栈递归地传播到下一个封闭try块。如果任何封闭try块都未捕获到异常，Java解释器将退出，并显示错误消息和堆栈跟踪信息。</p><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>char是Java原始类型。</p><p>char变量可以存储一个Unicode字符。</p><p>-示例-</p><p>chardelimiter=’;’;</p><p>-注释-</p><p>可以使用下列char常量：</p><p>\b-空格</p><p>\f-换页</p><p>\n-换行</p><p>\r-回车</p><p>\t-水平制表符</p><p>\’-单引号</p><p>\”-双引号</p><p>\”-反斜杠</p><p>\xxx-采用xxx编码的Latin-1字符。\x和\xx均为合法形式，但可能引起混淆。</p><p>\uxxxx-采用十六进制编码xxxx的Unicode字符。</p><p>Character类包含一些可用来处理char变量的static方法，这些方法包括isDigit()、isLetter()、isWhitespace()和toUpperCase()。</p><p>char值没有符号。</p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>class关键字用来声明新的Java类，该类是相关变量和/或方法的集合。</p><p>类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。</p><p>要使用类，通常使用new操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p><p>-示例-</p><p>public class Rectangle{</p><p>float width;</p><p>float height;</p><p>public Rectangle(floatw,floath){</p><p>width=w;</p><p>height=h;</p><p>}</p><p>public float getWidth(){</p><p>returnwidth;</p><p>}</p><p>public float getHeight(){</p><p>return height;</p><p>}</p><p>}</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue关键字用来跳转到for、while或do循环的下一个迭代。</p><p>-示例-</p><p>for(i=0;i&lt;max;i++){</p><statements><p>if(<done with this iteration>){</done></p><p>continue;</p><p>}</p><statements><p>}</p><p>-注释-</p><p>continue总是跳到最深层while、for或do语句的下一个迭代。</p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>default关键字用来标记switch语句中的默认分支。</p><p>-示例-</p><p>intarg=<somevalue>;</somevalue></p><p>switch(arg){</p><p>case1:</p><statements><p>break;</p><p>case2:</p><statements><p>break;</p><p>default:</p><statements><p>break;</p><p>}</p><p>-注释-</p><p>default块没有隐式结束点。break语句通常在每个case或default块的末尾使用，以便在完成块时退出switch语句。</p><p>如果没有default语句，其参数与任何case块都不匹配的switch语句将不执行任何操作。</p><h3 id="do"><a href="#do" class="headerlink" title="do"></a>do</h3><p>do关键字用于指定一个在每次迭代结束时检查其条件的循环。</p><p>-示例-</p><p>do{</p><statements><p>}</p><p>while(!found);</p><p>-注释-</p><p>do循环体至少执行一次。</p><p>条件表达式后面必须有分号。</p><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>double是Java原始类型。</p><p>double变量可以存储双精度浮点值。</p><p>-示例-</p><p>double ratio=.01;</p><p>double diameter=6.15;</p><p>double height=1.35E03;//1.35*103或1350.0</p><p>double height=1e-2;//1.0*10-2或0.01</p><p>-注释-</p><p>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。</p><p>Java浮点数值可代表无穷大和NaN（非数值）。Double包装对象类用来定义常量MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY和NaN。</p><h3 id="else"><a href="#else" class="headerlink" title="else"></a>else</h3><p>else关键字总是在if-else语句中与if关键字结合使用。else子句是可选的，如果if条件为false，则执行该子句。</p><p>-示例-</p><p>if(condition){</p><statements><p>}</p><p>else{</p><statements><p>}</p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>extends关键字用在class或interface声明中，用于指示所声明的类或接口是其名称后跟有extends关键字的类或接口的子类。</p><p>-示例-</p><p>public class Rectangle extends Polygon{</p><p>}</p><p>-注释-</p><p>在上例中，Rectangle类继承Polygon类的所有public和protected变量和方法。</p><p>Rectangle类可以重写Polygon类的任何非final方法。</p><p>一个类只能扩展一个其他类。</p><h3 id="false"><a href="#false" class="headerlink" title="false"></a>false</h3><p>false关键字代表boolean变量的两个合法值之一。</p><p>-示例-</p><p>boolean is Complete=false;</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final关键字可以应用于类，以指示不能扩展该类（不能有子类）。</p><p>final关键字可以应用于方法，以指示不能重写任何子类中的方法。</p><p>-示例-</p><p>public final class MyFinalClass{</p><p>}</p><p>public class MyClass{</p><p>public final String myFinal Method()</p><p>{</p><statements><p>}</p><p>}</p><p>-注释-</p><p>一个类不能同时是abstract又是final。abstract意味着必须扩展类，final意味着不能扩展类。</p><p>一个方法不能同时是abstract又是final。abstract意味着必须重写方法，final意味着不能重写方法。</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>finally关键字用来定义始终在try-catch-finally语句中执行的块。</p><p>finally块通常包含清理代码，用在部分执行try块后恢复正常运行。</p><p>-示例-</p><p>try{</p><p>&lt;可能引发异常的块&gt;</p><p>}</p><p>catch(&lt;java.lang.Exception或子类&gt;e){</p><p>&lt;处理异常e的代码&gt;</p><p>}</p><p>finally{</p><p>&lt;有异常或无异常情况下都执行的语句&gt;</p><p>}</p><p>-注释-</p><p>开始和结束标记{和}是finally子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。</p><p>每个try块都必须至少有一个catch或finally子句。</p><p>如果执行try块的任何部分，不论是否出现异常，也不论try或catch块是否包含return、continue或break语句，都一定会执行finally块中的代码。</p><p>如果不出现异常，控件将跳过try块，进入finally块。</p><p>如果在执行try块期间出现异常，并且相应的catch块包含break、continue或return语句，控件将首先穿过finally块，之后再执行break、continue或return。</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>float是Java原始类型。</p><p>float变量可以存储单精度浮点值。</p><p>-示例-</p><p>float ratio=.01;</p><p>float diameter=6.15;</p><p>float height=1.35E03;//1.35*103或1350.0</p><p>float height=1e-2;//1.0*10-2或0.01</p><p>-注释-</p><p>使用此关键字时应遵循下列规则：</p><p>Java中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上f或F，如0.01f。</p><p>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。</p><p>Java浮点数值可代表无穷大和NaN（非数值）。Float包装对象类用来定义常量MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY和NaN。</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for关键字用于指定一个在每次迭代结束前检查其条件的循环。</p><p>-示例-</p><p>inti;</p><p>for(i=0;i&lt;max;i++){</p><statements><p>}</p><p>-注释-</p><p>for语句的形式为for(initialize;condition;increment)</p><p>控件流进入for语句时，将执行一次initialize语句。</p><p>每次执行循环体之前将计算condition的结果。如果condition为true，则执行循环体。</p><p>每次执行循环体之后，在计算下一个迭代的condition之前，将执行increment语句。</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。</p><p>-示例-</p><p>if(condition){</p><statements><p>}</p><p>if(condition){</p><statements><p>}</p><p>else{</p><statements><p>}</p><p>-注释-</p><p>if语句可以有可选的else子句，该子句包含条件为false时将执行的代码。</p><p>包含boolean操作数的表达式只能包含boolean操作数。</p><h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><p>implements关键字在class声明中使用，以指示所声明的类提供了在implements关键字后面的名称所指定的接口中所声明的所有方法的实现。</p><p>-示例-</p><p>public class Truck implements IVehicle{</p><p>}</p><p>-注释-</p><p>在上例中，Truck类必须提供在IVehicle接口中所声明的所有方法的实现。</p><p>否则，Truck类将是独立的；它可以声明其他方法和变量，并扩展另一个类。</p><p>一个类可以实现多个接口。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>import关键字使一个包中的一个或所有类在当前Java源文件中可见。可以不使用完全限定的类名来引用导入的类。</p><p>-示例-</p><p>importjava.io.File;</p><p>importjava.net.*;</p><p>-注释-</p><p>当多个包包含同名的类时，许多Java程序员只使用特定的import语句（没有“*”）来避免不确定性。</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof关键字用来确定对象所属的类。</p><p>-示例-</p><p>if(node instanceof TreeNode){</p><statements><p>}</p><p>-注释-</p><p>在上例中，如果node是TreeNode类的实例，或者是TreeNode的子类的实例，则instanceof表达式的值将为true。</p><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>int是Java原始类型。</p><p>int变量可以存储32位的整数值。</p><p>-示例-</p><p>int number=5;</p><p>int octal Number=0377;</p><p>int hex Number=0xff;</p><p>-注释-</p><p>Integer类是int原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。</p><p>Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。</p><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>interface关键字用来声明新的Java接口，接口是方法的集合。</p><p>接口是Java语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。</p><p>-示例-</p><p>public interface IPolygon{</p><p>public float getArea();</p><p>public int getNumberOfSides();</p><p>public int getCircumference();</p><p>}</p><p>-注释-</p><p>实现了接口的任何类都必须提供在该接口中的所有方法的实现。</p><p>一个类可以实现多个接口。</p><h3 id="long"><a href="#long" class="headerlink" title="long"></a>long</h3><p>long是Java原始类型。</p><p>long变量可以存储64位的带符号整数。</p><p>-示例-</p><p>longnumber=5;</p><p>longanotherNumber=34590L;</p><p>longoctalNumber=0377;</p><p>longhexNumber=0xffl;</p><p>-注释-</p><p>Long类是long原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。</p><p>Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。</p><h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><p>native关键字可以应用于方法，以指示该方法是用Java以外的语言实现的。</p><p>-示例-</p><p>native String getProcessorType();</p><p>-注释-</p><p>Native方法不在此文档的讨论范围内。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>new关键字用于创建类的新实例。</p><p>-示例-</p><p>String sName=new String();</p><p>Float fVal=new Float(0.15);</p><p>-注释-</p><p>new关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。</p><p>参数集合必须与类的构造方法的签名匹配。</p><p>=左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。</p><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null是Java的保留字，表示无值。</p><p>-示例-</p><p>Integeri;</p><p>i=null;</p><p>Strings;</p><p>if(s!=null){</p><statements><p>}</p><p>-注释-</p><p>将null赋给非原始变量相当于释放该变量先前所引用的对象。</p><p>不能将null赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>package关键字指定在Java源文件中声明的类所驻留的Java包。</p><p>-示例-</p><p>package com.mycompany;</p><p>public class MyClass{</p><p>}</p><p>-注释-</p><p>package语句（如果出现）必须是Java源文件中的第一个非-注释-性文本。</p><p>在上面的-示例-中，MyClass类的完全限定类名是com.mycompany.MyClass。</p><p>如果Java源文件不包含package语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>private关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。</p><p>-示例-</p><p>public class MyPublicClass{</p><p>private class MyPrivateClass{</p><p>}</p><p>private int i;</p><p>private String myMethod(){</p><statements><p>}</p><p>}</p><p>-注释-</p><p>只能在声明private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。</p><p>所有类成员的默认访问范围都是package访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>protected关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p><p>-示例-</p><p>public class MyPublicClass{</p><p>protected class MyPrivateClass{</p><p>}</p><p>protected int i;</p><p>protected StringmyMethod(){</p><statements><p>}</p><p>}</p><p>-注释-</p><p>可以在声明protected类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。</p><p>所有类成员的默认访问范围都是package访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>public关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p><p>-示例-</p><p>public class MyPublicClass{</p><p>public class MyPrivateClass{</p><p>}</p><p>publicinti;</p><p>public String myMethod(){</p><statements><p>}</p><p>}</p><p>-注释-</p><p>可能只会在其他任何类或包中引用public类、方法或字段。</p><p>所有类成员的默认访问范围都是package访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>return关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。</p><p>-示例-</p><p>public void myVoidMethod(){</p><statements><p>return;</p><p>}</p><p>public String myStringMethod(){</p><p>Strings=”myresponse”;</p><p>returns;</p><p>}</p><p>public int myIntMethod(){</p><p>inti=5;</p><p>return(i);</p><p>}</p><p>-注释-</p><p>如果方法具有非void的返回类型，return语句必须具有相同或兼容类型的参数。</p><p>返回值两侧的括号是可选的。</p><h3 id="short"><a href="#short" class="headerlink" title="short"></a>short</h3><p>short是Java原始类型。</p><p>short变量可以存储16位带符号的整数。</p><p>-示例-</p><p>short number=5;</p><p>short octalNumber=0077;</p><p>short hexNumber=0xff;</p><p>-注释-</p><p>Short类是short原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。</p><p>Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。</p><p>-示例-</p><p>public class MyPublicClass{</p><p>public final static int MAX_OBJECTS=100;</p><p>static int_numObjects=0;</p><p>static class MyStaticClass{</p><p>}</p><p>static int getNumObjects(){</p><p>}</p><p>}</p><p>-注释-</p><p>通常，static关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。</p><p>static（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的-示例-中，另一个类中的代码可以实例化MyStaticClass类，方法是用包含它的类名来限定其名称，如MyClass.MyStaticClass。</p><p>static字段（类的成员变量）在类的所有实例中只存在一次。</p><p>可以从类的外部调用static方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。在上面的示例中，MyClass类外部的代码以MyClass.getNumObjects()的形式调用getNumObjects()static方法。</p><p>模式：</p><p>publicfinalstatic<type>varName=<value>;</value></type></p><p>通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的-示例-中，另一个类可以用MyClass.MAX_OBJECTS形式来引用MAX_OBJECTS常量。</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>super关键字用于引用使用该关键字的类的超类。</p><p>-示例-</p><p>public class MyClass{</p><p>public MyClass(Stringarg){</p><p>super(arg);</p><p>}</p><p>public String myStringMethod(){</p><p>return super.other String Method();</p><p>}</p><p>}</p><p>-注释-</p><p>作为独立语句出现的super表示调用超类的构造方法。</p><p>super.<methodname>()表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。</methodname></p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch语句用于基于某个表达式选择执行多个代码块中的某一个。</p><p>-示例-</p><p>intarg=<somevalue>;</somevalue></p><p>switch(arg){</p><p>case1:</p><statements><p>break;</p><p>case2:</p><statements><p>break;</p><p>default:</p><statements><p>break;</p><p>}</p><p>chararg=<somevalue>;</somevalue></p><p>switch(arg){</p><p>case’y’:</p><p>case’Y’:</p><statements><p>break;</p><p>case’n’:</p><p>case’N’:</p><statements><p>break;</p><p>default:</p><statements><p>break;</p><p>}</p><p>-注释-</p><p>switch条件的计算结果必须等于byte、char、short或int，jdk1.7后可以是String类型。</p><p>case块没有隐式结束点。break语句通常在每个case块末尾使用，用于退出switch语句。</p><p>如果没有break语句，执行流将进入所有后面的case和/或default块。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>synchronized关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。</p><p>-示例-</p><p>public class MyClass{</p><p>public synchronized static String mySyncStaticMethod(){</p><p>}</p><p>public synchronized String mySyncMethod(){</p><p>}</p><p>}</p><p>public class MyOtherClass{</p><p>Object someObj;</p><p>public String myMethod(){</p><statements><p>synchronized(someObj){</p><statement saffectingsomeobj><p>}</p><p>}</p><p>}</p><p>-注释-</p><p>synchronized关键字可防止代码的关键代码段一次被多个线程执行。</p><p>如果应用于静态方法（如上例中的MySyncStaticMethod），那么，当该方法一次由一个线程执行时，整个类将被锁定。</p><p>如果应用于实例方法（如上例中的MySyncMethod），那么，当该方法一次由一个线程访问时，该实例将被锁定。</p><p>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this关键字用于引用当前实例。</p><p>-示例-</p><p>public class MyClass{</p><p>int number;</p><p>public MyClass(intnumber){</p><p>this.number=number;</p><p>}</p><p>}</p><p>-注释-</p><p>当引用可能不明确时，可以使用this关键字来引用当前的实例。</p><p>在上面的-示例-中，构造方法参数number与类的成员变量同名。this.number明确表示MyClass的该实例的number成员变量。</p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>throw关键字用于引发异常。</p><p>-示例-</p><p>import java.io.IOException;</p><p>public class MyClass{</p><p>public method readFile(Stringfilename)throws IO Exception{</p><statements><p>if(error){</p><p>throw new IO Exception(“errorreadingfile”);</p><p>}</p><p>}</p><p>}</p><p>-注释-</p><p>throw语句将java.lang.Throwable作为参数。Throwable在调用栈中向上传播，直到被适当的catch块捕获。</p><p>引发非RuntimeException异常的任何方法还必须在方法声明中使用throws修饰符来声明它引发的异常。</p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>throws关键字可以应用于方法，以便指出方法引发了特定类型的异常。</p><p>-示例-</p><p>import java.io.IOException;</p><p>public class MyClass{</p><p>public method readFile(Stringfilename)throwsIOException{</p><statements><p>if(error){</p><p>throw new IO Exception(“errorreadingfile”);</p><p>}</p><p>}</p><p>}</p><p>-注释-</p><p>throws关键字将逗号分隔的java.lang.Throwables列表作为参数。</p><p>引发非RuntimeException异常的任何方法还必须在方法声明中使用throws修饰符来声明它引发的异常。</p><p>要在try-catch块中包含带throws子句的方法的调用，必须提供该方法的调用者。</p><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>transient关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。</p><p>-示例-</p><p>public class MyClass{</p><p>private transient String password;</p><p>}</p><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>try关键字用于包含可能引发异常的语句块。</p><p>-示例-</p><p>try{</p><p>&lt;可能引发异常的块&gt;</p><p>}</p><p>catch(&lt;java.lang.Exception或子类&gt;e){</p><p>&lt;处理异常e的代码&gt;</p><p>}</p><p>try{</p><p>&lt;可能引发其他异常的块&gt;</p><p>}</p><p>catch(FooExceptione){</p><p>&lt;处理FooExceptione的代码&gt;</p><p>}</p><p>catch(BarExceptione){</p><p>&lt;处理BarExceptione的代码&gt;</p><p>}</p><p>try{</p><p>&lt;可能引发异常的块&gt;</p><p>}</p><p>catch(&lt;java.lang.Exception或子类&gt;e){</p><p>&lt;处理异常e的代码&gt;</p><p>}</p><p>finally{</p><p>&lt;有异常或无异常情况下都执行的语句&gt;</p><p>}</p><p>-注释-</p><p>每个try块都必须至少有一个catch或finally子句。</p><p>如果某个特定异常类未被任何catch子句处理，该异常将沿着调用栈递归地传播到下一个封闭try块。如果任何封闭try块都未捕获到异常，Java解释器将退出，并显示错误消息和堆栈跟踪信息。</p><h3 id="true"><a href="#true" class="headerlink" title="true"></a>true</h3><p>true关键字表示boolean变量的两个合法值中的一个。</p><p>-示例-</p><p>boolean is Complete=true;</p><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>void关键字表示null类型。</p><p>-示例-</p><p>public class MyClass{</p><p>public void do Something(){</p><statements><p>return;</p><p>}</p><p>}</p><p>-注释-</p><p>void可以用作方法的返回类型，以指示该方法不返回值。</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>volatile关键字用于表示可以被多个线程异步修改的成员变量。</p><p>注意：volatile关键字在许多Java虚拟机中都没有实现。</p><p>-示例-</p><p>public class MyClass{</p><p>volatile int shared Value;</p><p>}</p><p>-注释-</p><p>volatile的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while关键字用于指定一个只要条件为真就会重复的循环。</p><p>-示例-</p><p>while(!found){</p><statements><p>}</p></statements></statements></statements></statements></statement></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements></statements>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java关键字是&lt;a href=&quot;https://baike.baidu.com/item/电脑语言/7105622&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;电脑语言&lt;/a&gt;里事先定义的，有特别意义的标识符，有时又叫&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="java编程学习第一季" scheme="https://firstsfifteen.github.io/categories/java%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%AD%A3/"/>
    
    
      <category term="java关键字" scheme="https://firstsfifteen.github.io/tags/java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客的美化</title>
    <link href="https://firstsfifteen.github.io/2019/05/17/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96/"/>
    <id>https://firstsfifteen.github.io/2019/05/17/Hexo博客的美化/</id>
    <published>2019-05-17T04:52:12.000Z</published>
    <updated>2019-05-21T14:38:23.509Z</updated>
    
    <content type="html"><![CDATA[<p>hexo中共有二百多款主题，目前next主题使用人数较多，界面简洁、舒适，内含插件多，总之体验非常棒。今天主要写一些Next主题中的一些配置：</p><h4 id="一、使用next主题"><a href="#一、使用next主题" class="headerlink" title="一、使用next主题"></a>一、使用next主题</h4><ol><li>两种安装方式：</li></ol><ul><li style="list-style: none"><input type="checkbox"> 克隆next主题到目标目录  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> <a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">next发布界面</a>下载，然后移动到themes目录下</li></ul><ol start="2"><li>启用主题： </li></ol><p>与所有 Hexo 主题启用的模式一样。 当 <strong>克隆 / 下载</strong> 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h4 id="二、-next中添加功能"><a href="#二、-next中添加功能" class="headerlink" title="二、 next中添加功能"></a>二、 next中添加功能</h4><ol><li><h5 id="来必力评论-LiveRe"><a href="#来必力评论-LiveRe" class="headerlink" title="来必力评论(LiveRe):"></a>来必力评论(LiveRe):</h5></li></ol><ul><li><p>[ ] 获取来必力id：  </p></li><li><p>登陆 <a href="https://livere.com/" target="_blank" rel="noopener">来必力</a> 注册;</p></li><li><p>注册后点击导航上边的安装，选择免费的city版本 ;</p></li><li><p>点击安装后填入网站的一些信息就可以获取到安装代码，框中的就是你的来必力id：</p></li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g39aoisi1tj30pq0hvwgf" alt="来必力"></p><ul><li><p>复制上边的id，在主题配置文件里面搜<code>livere_uid</code>，在后面添加来必力id即可：    </p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g39ajwinh3j30j803cq30" alt></p></li></ul><ol start="2"><li><h5 id="文章的字数统计和浏览时间，全站字数（卜算子busuanzi）："><a href="#文章的字数统计和浏览时间，全站字数（卜算子busuanzi）：" class="headerlink" title="文章的字数统计和浏览时间，全站字数（卜算子busuanzi）："></a>文章的字数统计和浏览时间，全站字数（卜算子busuanzi）：</h5></li></ol><ul><li>安装hexo-wordcount插件，git bash在网站根目录安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-wordcount --save</span></span><br></pre></td></tr></table></figure><ul><li>用于统计文章的字数以及分析出阅读时间。</li></ul><p>在主题配置文件中，搜索wordcount，设置为下面这样就可以了： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="文章的访问人数（leancloud）"><a href="#文章的访问人数（leancloud）" class="headerlink" title="文章的访问人数（leancloud）"></a>文章的访问人数（leancloud）</h5></li></ol><p>相比不蒜子的统计，LeanCloud的文章阅读量统计更加稳定靠谱，所以本人也把网站的文章内统计改为LeanCloud的了。设置方法参考—<a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">该文章</a>。</p><ol start="4"><li><h5 id="文章末尾的微信公众号和打赏"><a href="#文章末尾的微信公众号和打赏" class="headerlink" title="文章末尾的微信公众号和打赏"></a>文章末尾的微信公众号和打赏</h5></li></ol><p>在主题配置文件中的微信or支付宝收款地址处填入收款二维码图片即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持原创技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/weixinapply.jpg</span>     <span class="string">//也可以写入图床地址</span></span><br><span class="line"><span class="comment">#alipay: /images/alipay.jpg</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  qcode:</span> <span class="string">/images/gongzhonghao.jpg</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">欢迎订阅我的微信公众号！</span></span><br></pre></td></tr></table></figure><ol start="5"><li><h5 id="文章的评分和分享"><a href="#文章的评分和分享" class="headerlink" title="文章的评分和分享"></a>文章的评分和分享</h5></li></ol><ul><li style="list-style: none"><input type="checkbox"> 通过widgetpack来给网站每篇文章添加评分系统</li><li>首先注册账号，添加新站点，填入网站名称和域名地址，点击添加。</li><li><p>获取id</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g39b6v3mxxj30bp076t96" alt></p></li><li><p>在主题中添加id</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Star rating support to each article.</span></span><br><span class="line"><span class="comment"># To get your ID visit https://widgetpack.com</span></span><br><span class="line"><span class="attr">rating:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span>  <span class="string">&#123;your</span> <span class="string">ID&#125;</span>             <span class="string">//输入你的&lt;app_id&gt;</span> </span><br><span class="line"><span class="attr">  color:</span>  <span class="string">fc6423</span></span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 设置主题中的<code>needmoreshare2:</code> 来进行文章的分享：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  postbottom:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">box</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">bottomCenter</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Weibo,Wechat,Twitter,Facebook,Evernote,Douban</span></span><br></pre></td></tr></table></figure><ol start="6"><li><h5 id="侧边栏的联系方式和友情链接"><a href="#侧边栏的联系方式和友情链接" class="headerlink" title="侧边栏的联系方式和友情链接"></a>侧边栏的联系方式和友情链接</h5></li></ol><p>直接在主题的配置文件中添加即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span>              <span class="string">//社交</span></span><br><span class="line"><span class="attr">  GitHub:</span>  <span class="attr">https://github.com/firstsfifteen</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="comment">#E-Mail:  mailto:firstsfifteen@gmail.com || envelope</span></span><br><span class="line"><span class="attr">  Weibo:</span>  <span class="attr">https://weibo.com/u/6405322252</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"><span class="attr">  CSDN:</span>  <span class="attr">https://i.csdn.net/#/uc/profile</span>  <span class="string">||</span> <span class="string">copyright</span></span><br><span class="line">  <span class="string">知乎:</span>  <span class="attr">https://www.zhihu.com/people/zhi-jian-47-13</span> <span class="string">||</span> <span class="string">key</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="string">个人网盘:</span> <span class="attr">http://firstsfifteen.eu5.org</span> <span class="string">||</span> <span class="string">cloud</span></span><br><span class="line"><span class="attr">  Twitter:</span>  <span class="attr">https://mobile.twitter.com/JFPmSyvttaFwHmd</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line">  <span class="string">FB</span> <span class="attr">Page:</span>  <span class="attr">https://www.facebook.com/profile.php?id=100031711572654</span> <span class="string">||</span> <span class="string">facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span>                    <span class="string">//</span> <span class="string">友情链接</span>        </span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  V2EX:</span> <span class="attr">https://www.v2ex.com/</span></span><br><span class="line">  <span class="string">哔哩哔哩:</span> <span class="attr">https://www.bilibili.com/</span></span><br><span class="line">  <span class="string">网易云音乐:</span> <span class="attr">https://music.163.com/</span></span><br><span class="line">  <span class="string">咪咕鱼导航:</span> <span class="attr">http://www.miguyu.com/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo中共有二百多款主题，目前next主题使用人数较多，界面简洁、舒适，内含插件多，总之体验非常棒。今天主要写一些Next主题中的一些配置：&lt;/p&gt;
&lt;h4 id=&quot;一、使用next主题&quot;&gt;&lt;a href=&quot;#一、使用next主题&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="技术教程" scheme="https://firstsfifteen.github.io/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="next" scheme="https://firstsfifteen.github.io/tags/next/"/>
    
      <category term="博客美化" scheme="https://firstsfifteen.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>博客中添加音乐和视频</title>
    <link href="https://firstsfifteen.github.io/2019/05/16/%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91/"/>
    <id>https://firstsfifteen.github.io/2019/05/16/博客中添加音乐和视频/</id>
    <published>2019-05-16T14:49:48.000Z</published>
    <updated>2019-05-17T06:32:08.700Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、博客站点添加音乐播放器"><a href="#一、博客站点添加音乐播放器" class="headerlink" title="一、博客站点添加音乐播放器"></a>一、博客站点添加音乐播放器</h4><p>因为我们搭建的hexo为静态博客，看起来比较枯燥，不过我们可  以通过一些配置来美化我们的博客，这部分内容主要讲一下在主页的侧边栏引入音乐播放： </p><ul><li style="list-style: none"><input type="checkbox" checked> 我这里选用的是网易云音乐的外链来实现，其他的音乐也类似： </li></ul><ol><li>登录网页版的网易云音乐，选择一首歌曲或者多首歌曲到歌单，点击生成外链播放器，本播放器没有版权的歌是不能生成外链的；<br><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g33mog6er8j30i807f0ta" alt="生成外链播放器"></li></ol><ol start="2"><li><p>选择iframe插件，自定义设置外链，然后点击复制代码；<br><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g33n951oyyj30k10gzt9u" alt="复制外链"></p></li><li><p>将外链插入到<code>~/themes/next-recent/layout/_macro/sidebar.swig</code>中，比如我想把外链播放器放在侧边栏链接的下方；</p></li></ol><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g33nm9orzij30ug0cdaca" alt="插入外链播放器代码"></p><ul><li style="list-style: none"><input type="checkbox" checked> 最后在博客中的效果：</li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g33nt5ethzj307e03e74f" alt="实现外链播放"></p><h4 id="二、文章中添加音乐和视频播放器"><a href="#二、文章中添加音乐和视频播放器" class="headerlink" title="二、文章中添加音乐和视频播放器"></a>二、文章中添加音乐和视频播放器</h4><p>同理，还是采用外链的方式，不过在博客文章里引入音乐或者视频更加简单，直接黏贴外链代码到目标位置就可以了，测试如下：</p><ul><li style="list-style: none"><input type="checkbox" checked> 1. 添加音乐到文章</li></ul><blockquote><p>起风了（原始版）（Cover：买辣椒也用券）,下方为我选择的这首歌的外链源码和外链播放器：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1340175443&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1340175443&auto=0&height=66"></iframe><ul><li><p>[x] 2. 添加视频到文章</p></li><li><p>像优酷、土豆、腾讯视频、爱奇艺、哔哩哔哩等都支持视频外链,上传视频后,点击分享按钮,就能找到视频外链链接；</p><ul><li><p>bilibili片头没广告，太有良心了有木有~，就拿B站复制外链来举例<br><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g33pcnx2drj30ho0bhabe" alt></p></li><li><p>黏贴链接到目标位置</p></li></ul></li></ul><blockquote><p>买辣椒也用券 —《起风了》MV 的视频外链和外链播放器：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=39293155&amp;cid=69050275&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">500</span> <span class="attr">height</span>=<span class="string">400</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li style="list-style: none"><input type="checkbox" checked> B站复制过来的外链，需要高度和高度来控制播放器的尺寸，我添加了<code>width=500  height=400</code></li></ul></blockquote><iframe src="//player.bilibili.com/player.html?aid=39293155&cid=69050275&page=1" scrolling="no" border="0" width="500" height="400" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><ul><li style="list-style: none"><input type="checkbox" checked> 这个起风了mv是放在我用onedrive搭建的网盘中的，所以读取速度很慢；</li></ul><blockquote><p>MV外链和外链播放器如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://firstsfifteen.eu5.org/?/%E8%A7%86%E9%A2%91/MV/%E3%80%8A%E8%B5%B7%E9%A3%8E%E4%BA%86%E3%80%8B.mp4"</span><span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><video>&lt;source src=”<a href="http://firstsfifteen.eu5.org/?/%E8%A7%86%E9%A2%91/MV/%E3%80%8A%E8%B5%B7%E9%A3%8E%E4%BA%86%E3%80%8B.mp4&quot;type=&quot;video/mp4&quot;&gt;" target="_blank" rel="noopener">http://firstsfifteen.eu5.org/?/%E8%A7%86%E9%A2%91/MV/%E3%80%8A%E8%B5%B7%E9%A3%8E%E4%BA%86%E3%80%8B.mp4&quot;type=&quot;video/mp4&quot;&gt;</a></video><p>本次测试内容就到这里，仅供娱乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、博客站点添加音乐播放器&quot;&gt;&lt;a href=&quot;#一、博客站点添加音乐播放器&quot; class=&quot;headerlink&quot; title=&quot;一、博客站点添加音乐播放器&quot;&gt;&lt;/a&gt;一、博客站点添加音乐播放器&lt;/h4&gt;&lt;p&gt;因为我们搭建的hexo为静态博客，看起来比较枯燥，不
      
    
    </summary>
    
      <category term="娱乐试验" scheme="https://firstsfifteen.github.io/categories/%E5%A8%B1%E4%B9%90%E8%AF%95%E9%AA%8C/"/>
    
    
      <category term="小测试" scheme="https://firstsfifteen.github.io/tags/%E5%B0%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="hexo配置" scheme="https://firstsfifteen.github.io/tags/hexo%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>图床</title>
    <link href="https://firstsfifteen.github.io/2019/05/16/%E5%9B%BE%E5%BA%8A/"/>
    <id>https://firstsfifteen.github.io/2019/05/16/图床/</id>
    <published>2019-05-15T16:00:00.000Z</published>
    <updated>2019-05-21T13:42:36.210Z</updated>
    
    <content type="html"><![CDATA[<p>这两天兴致勃勃的用hexo搭建好了博客系统，并部署到了github和conding两个托管平台：</p><ul><li><p>[x] <a href="https://firstsfifteen.github.io/">https://firstsfifteen.github.io/</a></p></li><li><p>[x] <a href="https://firstsfifteen.coding.me/" target="_blank" rel="noopener">https://firstsfifteen.coding.me/</a></p></li></ul><p>正式开始记录博文的时候，才发现在markdown中，需要找一个网络云盘，也就是图床来存储图片，这样可以简化写作流程，同时使用图床可以节约自己服务器的空间。</p><h4 id="一、付费版："><a href="#一、付费版：" class="headerlink" title="一、付费版："></a>一、付费版：</h4><p>国内的 七牛云 、腾讯  、阿里….</p><p>国外的 AWS  、cloudinary….</p><p>我目前只实名认证了<code>七牛云</code>，注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云是国内专业CDN服务商，插件支持比较多</p><h4 id="二、免费版"><a href="#二、免费版" class="headerlink" title="二、免费版"></a>二、免费版</h4><p>像简书，CSDN，新浪等平台的图床，还有一些大佬自己维护的图床站点都很不错，这里记录一下我用到的几款</p><h5 id="1-简书"><a href="#1-简书" class="headerlink" title="1. 简书"></a>1. <a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a></h5><ul><li style="list-style: none"><input type="checkbox" checked> 简书网站上上传图片，图片会自动保存在简书图床，只有链接，无法后续操作</li></ul><h5 id="2-新浪图床"><a href="#2-新浪图床" class="headerlink" title="2.  新浪图床"></a>2.  <a href="https://weibo.com/" target="_blank" rel="noopener">新浪</a>图床</h5><p>使用的是微博相册功能，只要有微博账号就可以免费使用图床功能了</p><ul><li>容量流量无限；</li><li>图片尺寸:默认缩略图与原图；</li><li>访问速度快;</li><li>登录微博网站上传 / Chrome有第三方插件</li><li><p>[x] Chrome有第三方插件实现方法：</p><ul><li>参考<a href="https://link.zhihu.com/?target=https%3A//github.com/fate-lovely/pic-on-weibo" target="_blank" rel="noopener">图床on微博</a>,在chrome浏览器导入插件，开启插件，登录微博就可以在框里上传图片，就可以复制链接了。</li></ul></li></ul><h5 id="3-路过图床"><a href="#3-路过图床" class="headerlink" title="3.  路过图床"></a>3.  <a href="https://imgchr.com" target="_blank" rel="noopener">路过图床</a></h5><ul><li>高速稳定的图片上传和外链服务</li><li>全球CDN加速, 最大单张支持 10 MB</li><li>图片尺寸可编辑</li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g399rnkf2tj310a0c6wv8" alt></p><h6 id="4-SM-MS"><a href="#4-SM-MS" class="headerlink" title="4.  SM.MS "></a>4.  <a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS </a></h6><ul><li>永久存储免注册，图片链接支持https</li><li>每个图片最大5M，</li><li>上传不支持更改尺寸</li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g399sjdothj30z50fl0t3" alt></p><h5 id="5-Tinypic"><a href="#5-Tinypic" class="headerlink" title="5.  Tinypic"></a>5.  <a href="http://tinypic.com/" target="_blank" rel="noopener">Tinypic</a></h5><p>Photobucket旗下网站，上传的图片都是公开的，可上传视频。</p><ul><li><p>容量流量无限；</p></li><li><p>可以选择上传尺寸</p></li><li><p>图片三个月若无人浏览即删除；</p></li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g399tpkez2j30tc0ft75e" alt></p><h5 id="6-GitHub"><a href="#6-GitHub" class="headerlink" title="6. GitHub"></a>6. <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></h5><p>GitHub是一个面向开源及私有软件项目的托管平台，库的大小没有限制，但推荐1G以内。</p><ul><li>容量流量无限；</li><li>访问速度：慢，GitHub服务器都在国外</li></ul><h4 id="三、-个人网盘"><a href="#三、-个人网盘" class="headerlink" title="三、  个人网盘"></a>三、  <a href="http://firstsfifteen.eu5.org/" target="_blank" rel="noopener">个人网盘</a></h4><ul><li style="list-style: none"><input type="checkbox" checked> 用onedrive搭建，实现了图床功能。</li></ul><ul><li>5T空间</li><li>支持图片、视频</li><li>访问速度慢</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地球图片的个人网盘链接： http://firstsfifteen.eu5.org/?/img/z.jpg</span><br></pre></td></tr></table></figure><p><img src="http://firstsfifteen.eu5.org/?/img/z.jpg" alt="地球"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>综合评分：</p><ul><li style="list-style: none"><input type="checkbox"> 七牛云：     五星</li><li style="list-style: none"><input type="checkbox" checked> 微博相册 :   四星半      </li><li style="list-style: none"><input type="checkbox" checked> 路过图床：  四星</li><li style="list-style: none"><input type="checkbox"> 简书：         三星半</li><li style="list-style: none"><input type="checkbox"> SM.MS:        三星半</li><li style="list-style: none"><input type="checkbox"> Tinypic:        三星半</li><li style="list-style: none"><input type="checkbox"> GitHub：     三星</li></ul><p>如果对图床性能要求不大的话，几款免费版的也能满足日常使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天兴致勃勃的用hexo搭建好了博客系统，并部署到了github和conding两个托管平台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[x] &lt;a href=&quot;https://firstsfifteen.github.io/&quot;&gt;https://firstsfifteen.git
      
    
    </summary>
    
      <category term="娱乐试验" scheme="https://firstsfifteen.github.io/categories/%E5%A8%B1%E4%B9%90%E8%AF%95%E9%AA%8C/"/>
    
    
      <category term="小测试" scheme="https://firstsfifteen.github.io/tags/%E5%B0%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="图床" scheme="https://firstsfifteen.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客的搭建</title>
    <link href="https://firstsfifteen.github.io/2019/05/15/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://firstsfifteen.github.io/2019/05/15/Hexo博客的搭建/</id>
    <published>2019-05-15T08:35:31.000Z</published>
    <updated>2019-05-22T08:27:12.613Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h4><ol><li>打开 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>和 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 官网，下载并安装Git和node。</li></ol><ul><li>安转一直点击下一步即可。</li></ul><ol start="2"><li>打开cmd命令行，输入代码查看node.js和Git环境是否安装成功：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><ul><li><p>安装成功后会显示当前版本，如图</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g38znheulgj309v050t8s" alt="检查环境"></p></li></ul><h4 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h4><ol><li><p>在命令行输入如下代码，进行hexo的安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo -cli</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g38zs2e8foj30ll03lq2s" alt="安装hexo">    </p></li><li><p>输入<code>hexo  -v</code>，检查hexo是否安装成功：</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g3905n9dnvj309i087dfq" alt="查看hexo版本信息"></p></li><li><p>Hexo安装完成后，就可以在目录下依次执行以下命令:</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;      //&lt;folder&gt;为自定义的文件夹名</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>输入<code>hexo init 文件夹名</code>，初始化文件夹</li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g393bgyuvxj30kh06bjrc" alt="新建博客目录"></p><ul><li>在博客目录下输入<code>npm  install</code>，安装所需要的组件</li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g39609gjcej30lw04j749" alt="安装组件"></p><h4 id="三、-测试Hexo"><a href="#三、-测试Hexo" class="headerlink" title="三、 测试Hexo"></a>三、 测试Hexo</h4><ol><li><p>输入<code>hexo g</code>，生成静态文件，首次体验Hexo；</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g39673450lj30bl03u0sk" alt="生成静态文件"></p></li><li><p>输入<code>hexo  s</code>，开启服务器，访问该网址，就可以体验Hexo了；</p></li></ol><ul><li><p>开启服务器</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g3968ys2n2j30f402pa9u" alt="开启服务器"></p></li><li><p>浏览器中输入<code>localhost:4000</code>，便可以访问静态博客页面了</p></li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g396e3rixxj30ln07pacp" alt="访问页面"></p><ol start="3"><li><p>在命令行输入<code>ctrl+c</code>，根据提示输入Y，就可以停止服务器。</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g396gh82umj30hi04kwec" alt="停止服务器"></p></li></ol><h4 id="四、-Hexo部署到服务器上"><a href="#四、-Hexo部署到服务器上" class="headerlink" title="四、 Hexo部署到服务器上"></a>四、 Hexo部署到服务器上</h4><p>Hexo 提供了快速方便的一键部署功能，只需一条命令就能将网站部署到服务器上。下面分别介绍将Hexo部署到Github和Coding上。</p><h5 id="一-、Hexo部署到Github"><a href="#一-、Hexo部署到Github" class="headerlink" title="(一)、Hexo部署到Github"></a>(一)、Hexo部署到Github</h5><ol><li><p>登录<a href="https://github.com/" target="_blank" rel="noopener">github</a>官网，注册Github账号；  </p></li><li><p>GitHub中创建个人仓库；<br>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是，其中xxx就是你注册GitHub的用户名。这里我已经创建过了。</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g3981fnrylj30hz0a8dgi" alt></p></li><li><p>生成SSH添加到GitHub</p></li></ol><ul><li>回到你的gitbash中  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "yourname"  </span><br><span class="line">git config --global user.email "youremail"</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><ul><li>然后创建SSH,一路回车  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -keygen -t rsa -C "youremail"</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹.ssh，简单来讲，就是一个秘钥，<code>id_rsa.pub</code>是公共秘钥，把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><ul><li>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的<code>id_rsa.pub</code>里面的信息复制进去。 </li></ul><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g398878jv9j30w709jaaz" alt></p><ol start="4"><li>将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，添加以下代码，修改<em>YourgithubName</em>为你的GitHub账户昵称。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="attr">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g397qboi46j30jc03n74c" alt></p><ol start="5"><li>在生成以及部署文章之前，需要安装一个扩展：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g397f501p6j30jd01ya9u" alt></p><ol start="6"><li>在每次更新博客目录内容后，可以依次输入以下命令将其部署到GitHub  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate          //可简写为 hexo  g</span><br><span class="line">hexo deploy            // hexo   d</span><br></pre></td></tr></table></figure><p> <img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g397ih4xqzj30aj04qglg" alt></p><p>等部署成功后，就可以在<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> 这个网站刷新查看你的博客了！！</p><p> <img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g397n7u04oj30bs08w3z1" alt></p><h5 id="（二）、Hexo部署到Coding"><a href="#（二）、Hexo部署到Coding" class="headerlink" title="（二）、Hexo部署到Coding"></a>（二）、Hexo部署到Coding</h5><ol><li>登录<a href="https://dev.tencent.com/" target="_blank" rel="noopener">腾讯云开发者平台</a>，注册账号；</li><li>进入控制台，新建项目：<br><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g398iwg1daj30ke0bvweu" alt></li><li>添加公钥</li></ol><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g398s1rrmej30wn09paar" alt></p><ol start="4"><li><p>查看项目的HTTPS链接：</p><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g398v0vq0bj30950e43ys" alt></p></li><li><p>将hexo和Coding关联起来，打开站点配置文件 <code>_config.yml</code>，添加自己Coding仓库的链接：</p></li></ol><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g397wl7t25j30iy03y0su" alt></p><ol start="6"><li>每次更新博客目录内容后，可以依次输入以下命令将其部署到Coding<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate          //可简写为 hexo  g</span><br><span class="line">hexo deploy            // hexo   d</span><br></pre></td></tr></table></figure></li></ol><p>等部署成功后，就可以在<a href="http://yourname.coding.me" target="_blank" rel="noopener">http://yourname.coding.me</a> 这个网站刷新查看你的博客了！！</p><p> <img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g3990qchh2j30c808y0ta" alt></p><h4 id="五、-Hexo的基本配置"><a href="#五、-Hexo的基本配置" class="headerlink" title="五、 Hexo的基本配置"></a>五、 Hexo的基本配置</h4><p>在文件根目录下的<em><code>_config.yml</code></em>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官访文档</a> 。</p><ol><li><h5 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h5><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g399dkpfftj30h504rdfv" alt></p></li><li><h5 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h5><p><img src="http://ww1.sinaimg.cn/large/006Zu4Vegy1g399gko4faj30fy026745" alt></p></li><li><h5 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h5></li></ol><ul><li>新建一篇文章</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new "my blog"</span><br></pre></td></tr></table></figure><ul><li>生成静态文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate     //简写 hexo g</span><br></pre></td></tr></table></figure><ul><li>部署网站</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy     //简写 hexo d</span><br></pre></td></tr></table></figure><ol start="4"><li><h5 id="Hexo插件安装"><a href="#Hexo插件安装" class="headerlink" title="Hexo插件安装"></a>Hexo插件安装</h5></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：安装Git插件   npm install  hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、配置环境&quot;&gt;&lt;a href=&quot;#一、配置环境&quot; class=&quot;headerlink&quot; title=&quot;一、配置环境&quot;&gt;&lt;/a&gt;一、配置环境&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;打开 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="技术教程" scheme="https://firstsfifteen.github.io/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://firstsfifteen.github.io/tags/hexo/"/>
    
      <category term="博客搭建" scheme="https://firstsfifteen.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>FirstBlog</title>
    <link href="https://firstsfifteen.github.io/2019/05/13/First-Blog/"/>
    <id>https://firstsfifteen.github.io/2019/05/13/First-Blog/</id>
    <published>2019-05-13T08:35:31.000Z</published>
    <updated>2019-05-15T16:48:00.818Z</updated>
    
    <content type="html"><![CDATA[<h5 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h5><p>这是我的第一篇文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h5&gt;&lt;p&gt;这是我的第一篇文章&lt;/p&gt;

      
    
    </summary>
    
      <category term="测试" scheme="https://firstsfifteen.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="first" scheme="https://firstsfifteen.github.io/tags/first/"/>
    
  </entry>
  
</feed>
