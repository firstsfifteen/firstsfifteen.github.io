<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[个人服务器使用记录]]></title>
    <url>%2F2019%2F06%2F09%2F%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[个人服务器使用记录：一、byet （英国公司，提供免费托管 | 高级托管服务。）byet免费托管： username 绑定域名 运行状况 b14_24014983 nanbei.gq 已安装，正常运行 b7_24014277 —- 暂未使用 主机控制面板的登录地址： vistapanel ( password: qaz….. ) 注册托管的邮箱为： 2196153590@qq.com 在线文件管理暂未发现解压压缩包的方法，等待解决。]]></content>
      <categories>
        <category>个人记录</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人域名使用记录]]></title>
    <url>%2F2019%2F06%2F09%2F%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[个人域名使用记录：一、 万网 （阿里云旗下的的域名平台） 域名 有效期 DNS解析 网站信息 ygmzj.top 2019.5.27—2020.5.27 阿里云控制台 —— 阿里云使用淘宝账号登陆，已实名认证； 域名为阿里云旗下万网购买，一年后再考虑续订或者换购； 暂未购买国内任何服务器，域名也暂未备案。 二、Freenom （国外域名平台）提供付费服务，同时提供(.tk , .ml , .ga , .gq , .cf)五个顶级域名的免费注册、使用与管理 1. freenom上注册的顶级域名： 域名 有效期 DNS解析 网站信息 nanbei.gq 2019.6.7—2020.6.7 转到 byet托管平台 WP - 博客 Freenom免费域名的最长免费续订时间为1年，到期可续订； Freenom域名注册、管理网站的账号为：( 2196153590@qq.com qaz……) byet控制面板的登录账号为： （username： b14_24014983 password： qaz……） nanbei.gq 下面还有四个子域名，在byet 控制面板管理。 2. 主域名（nanbei.gq）下面的四个子域名： 子域名 主机平台 网站信息 music.nanbei.gq byet免费托管 云音乐 –试听下载 musics.nanbei.gq ~ 音乐 –MKOnlinePlayer skydrive.nanbei.gq ~ onedrive-网盘 movie.nanbei.gq ~ — 四个子域名搭建的娱乐网站用到的程序均为网上开源项目； 网站上的数据均不在本服务器，全部来自互联网。]]></content>
      <categories>
        <category>个人记录</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人（域名+服务器）使用记录]]></title>
    <url>%2F2019%2F05%2F29%2F%E4%B8%AA%E4%BA%BA%EF%BC%88%E5%9F%9F%E5%90%8D%2B%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[个人（域名+服务器）使用记录 一、服务器（一）免费空间free.3v.do （100M永久免费 空间 | 给定子域名| 只支持ASP和html源码）网站用户名：ygmzj 密码：qaz…… (密码9位数 ……表示隐藏的6位数字) 网站域名：http://ygmzj.host3v.com FTP地址： 009.3vftp.com FTP用户名： ygmzj FTP密码： 网站账户密码 （二）Freewha免费虚拟主机 （永久 | PhP） freewha免费子域名注册自动绑定虚拟主机 （共3个） 主机名：firstsfifteen.eu5.org （待使用） 、 firstsfifteen-skydrive.eu5.org (云音乐 | 使用中) 、 firstsfifteen-musics.eu5.org （个人网盘 | 使用中） 密码：qaz…… FTP： FTP地址（等同于主机名 ) / FTP用户名（主机名） / FTP密码（等于帐户密码） 主机管理地址：FreeWHA在线控制面板 （登录名： 主机名 密码： 账户密码） 已有域名绑定虚拟主机 （2个 | 可使用） 主机名：www.ygmzj.ml `www.ygmzj.tk` 密码：qaz…… FTP： FTP地址（等同于主机名 ) / FTP用户名（主机名） / FTP密码（等于帐户密码） 主机管理地址：FreeWHA在线控制面板 （登录名：主机名 密码：账户密码 ） （三）Gearhost主机：(免费套餐 | 支持asp .net、php、mysql、mssql | 可绑域名)（网站登录名： `firstsfifteen@gmail.com` 密码： qaz……%） 主机CloudSite名 共享ip 运行状况 FTP信息 ygmzj 204.246.56.80 视屏网站 / 使用中 Hostname: ftp.gear.host Username: ygmzj\$ygmzjpassword: 见原文 主机管理地址： Cloudsites在线界面 （四）一个月 云上萝莉 免费主机 （ 2019.05.29—-2019.6.29 | 每次免费最大续期一月 ）（网站登录名： ygmzj1 密码： qaz….. 邮箱：`2162560783@qq.com`） ip 域名绑定 运行状况 FTP 91.121.81.113 ygmzj.cf 正常 / 待使用 ftp地址：ygmzj.cfftp账号: ygmzjcfftp密码： 产品登录密码 主机的管理地址：easypanel 虚拟主机控制面板 （五）两年免费空间-小夜博客 （2019.5.29—-2021.5.29 | 免费续期1~12个月）（登录网站，用户名: 17695779826 / `2196153590@qq.com` 密码: qaz……. ） 主机ip 域名绑定 运行状况 FTP 47.52.249.13 ygmzj-blog.ml 启动 / 待使用 ftp地址: ftp://47.52.249.13:21ftp用户名： jpdpbh_951ftp密码： qaz…… 主机的管理地址：在线管理面板 (六) 雨云-虚拟主机 （300积分兑换7天 | 200积分/1元 |每天签到50积分 | 免费主机每次最多续15天）(网站用户名: ygmzj / 邮箱：2196153590@qq.com 密码：qaz……) 二、域名：（一）、付费: （一年2019.5.27—-2020.5.27 | 万网 ） 域名 域名管理平台 解析信息 绑定服务器 备案 网站程序 ygmzj.top 阿里云控制台 — — — — 注： 暂未使用: --- 备案是指对域名备案，要备案域名，是通过主机商来进行备案的； 域名要绑定在国内主机使用就必须备案，如果是绑定境外主机使用是不需要备案的； 备案后更换主机商，备案域名的时候用A主机空间，当换成B的空间后，就需要办理转接入，把接入商更换为B主机。 （二）、一年免费域名 : （2019.5.27—-2020.5.27 | Freenom域名服务 | 国际顶级域名 ） 域名 域名管理平台 解析信息 绑定服务器 备案 网站程序 ygmzj.tk Freebnom平台 自定义到freewha域名服务器 Freewha虚拟主机 \ wp ygmzj.ml ~ ~ ~ \ 音乐 ok ygmzj.ga ~ A 204.246.56.80www CNAME ygmzj.ga CloudSites主机:- ygmzj \ 视频网站 ~ ygmzj.cf ~ A 91.121.81.113 云上萝莉-免费主机 \ wp ~ ygmzj-blog.ml ~ A 47.52.249.13 免费空间-小夜博客 \ wp ~ ygmzj.gq ~ facebook登录 awardspace \ 云音乐 注： 暂未使用: --- 无需使用：\ 同上一列：~ 待删除： XXX 一年免费的域名绑定的虚拟空间/主机均在国外； freenom 提供了tk、ml、ga、cf、gq 这几类后缀的免费域名： .tk 域名，意为 Talker（说话的人）， .tk域名是南太平洋岛国托克劳的顶级域名； .ml 是非洲国家马里的后缀； .ga 域名为加蓬国家顶级域名后缀； .cf 是中非共和国的后缀,； .gq域名是赤道几内亚国家地区顶级域名。 （三）、免费子域名： （永久 | 基于Freewha免费子域名） 子域名自动绑定虚拟主机；无法指向顶级域名； 已有虚拟主机也无法添加新域名；虚拟主机的配置见： “Freewha虚拟空间”。 子域名 域名管理平台 解析信息 绑定服务器 备案 网站程序 firstsfifte.eu5.org \ \ 自带绑定Freewha虚拟空间服务器 \ — firstsfifteen-musics.eu5.org \ \ ~ \ 云音乐 firstsfifteen-skydrive.eu5.org \ \ ~ \ 个人网盘 注： 暂未使用: --- 无需使用： \ 同上一列：~]]></content>
      <categories>
        <category>个人记录</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免费网站搭建]]></title>
    <url>%2F2019%2F05%2F27%2F%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一个网站主要由域名+服务器+程序构成 最简单高效率的就是选择合适的阿里云或者腾讯云旗下的域名和服务器组合搭建一个国内网站。一来服务器和域名都在一个控制台，方便操作；二是腾讯和阿里的规模相对较大，产品成熟，对于学生都有优惠，他们旗下的产品都可以免费试用。 本文主要记载我这几天瞎折腾的收获：在阿里云旗下万网购买了一年的ygmzj.top域名，进行了实名认证，但目前没有购买国内能使用超过三个月的服务器，所有域名也就没有备案，搁置在了控制台里。 下面写的是两个国外免费虚拟空间、主机做服务器，通过FTP上传网站程序（源码）到空间，结合免费域名搭建的两个娱乐测试小网站 一、通过Freenom网站注册并管理.TK、.CF、.ML、.GA四大免费顶级域名（我的freenom网站的账号： `2196153590@qq.com` 密码： qaz…….） 登录Freenom网站后，查询域名，然后填写资料，个人地区城市邮编资料要和自己使用的ip所在地址对应，（我科学上网ip定位在纽约，输入纽约地址，邮编，街道等，然后随意输十位数字的美国电话），就可以成功注册域名了； .tk域名是南太平洋岛国托克劳的顶级国别域名，全球通用 。在freenom网站注册的tk域名有25次/90天的访问限制； .ml域名是非洲国家马里的后缀，.cf域名中非共和国的后缀，.ga域名则是加蓬共和国； 注册的域名使用时间为（2-12个月），到期可以续期（2-12个月）； Freenom网站中&gt;服务&gt;我的域名，就可以在里面管理域名了。可以选择管理DNS进行域名解析或者自定义域名服务器 二、国外的服务器不需要备案，以下是我使用过的（一） Freewha虚拟主机：免费托管服务 1500MB免费网络空间; 不计量的流量; 启用了mod_rewrite（+其他重要模块）的apache 2.4 webserver ; .htaccess，.htpasswd 支持; 几乎所有扩展启用的PHP 7.1; 由 MariaDB 10.2提供支持的免费mysql数据库 ; phpMyAdmin，一种流行的数据库管理工具，已预先安装并立即可用; SSI支持（服务器端包含 - .shtml）; 完整的FTP支持 - 文件管理器提供的web-ftp应用程序（WYSIWYG文件编辑器，FTP客户端 - 基于浏览器，设置文件权限的工具，创建目录，创建文件，重命名工具，zip / unzip实用程序等）; 访问我们的控制面板，您可以在其中更改帐户详细信息并激活功能; 登录Freewha网站，可以选择 免费注册子域名托管 (1). 输入自己想好的昵称，在选择任一后缀，点击proceed。 (2). 然后输入一个邮箱，设置密码，点击完成。这时绑定子域名的虚拟主机就注册好了，会收到ftp的主机、用户名和密码； (3). 选择一个ftp工具就可以将网站程序源码上传到虚拟主机空间，然后就可以输入域名查看网站了。 8uftp / FileZilla-ftp下载地址 net2ftp在线使用 已有域名免费托管 (1). 输入自己已有的域名，然后点击proceed 需要在注册框里输入自己已有的域名，同时记录下固定的服务器名称ns1.freewha.com和 ns2.freewha.com 进入域名的控制台，将freewha的服务器名称输入到freenom网站服务的域名自定义服务器中，这样域名和虚拟空间就绑定在一起了。 (2). 输入邮箱，设置密码。操作同上 (3). 通过ftp上传源码，操作同上，然后就可以通过自己域名访问网站了。 （二）Gearhost：提供免费和付费的主机套餐 免费套餐主机容量100M； 月流量1G； 支持PHP、.net和node.js程序； 免费提供Myaql、SQL Server和Mongo db数据库； 可以运行Wordpress和Asp.net程序； Gearhost免费套餐对于建站数量没有限制，但是限制内存是256MB，CPU占用为5% 注册Gearhost账号，然后可以选择添加免费的CloudSite （我的Gearhost账号：谷歌邮箱， 密码：qaz……%） 点击自己注册的cloudsite名称，然后会跳到控制台 点击Publish，可以查看ftp的主机名，用户名和密码。通过ftp工具连接就可以上传网站程序源码到网页空间了； Config里可以对数据库、php、.net的版本等进行选择； 点击Domains，可以看到自己的域名，点击域名，就可以看到域名的解析信息，记录下来写到自己域名管理平台的解析中去 在自己域名管理平台中添加刚才的解析信息。域名生效后就可以访问自己的网站了 三、搭建的两个娱乐练习网站首先说一下个人博客网站： 前端时间分别通过Github托管平台和Coding托管平台结合Hexo静态框架搭建了个人博客，使用的对于自己做记录的私用博客来说，使用托管平台完全足够。github的用户多，conding在国内的访问速度相对快点。如果对性能要求高，可以购买服务器和域名结合WordPress，emlog等程序来搭建。 Github+hexo的地址：https://firstsfifteen.github.io/ Coding+hexo的地址：https://firstsfifteen.coding.me/ Hexo博客的搭建方法：点击去原文查看 下面是利用免费域名+免费虚拟主机+开源程序搭建的两个娱乐练习网站 （一） 云音乐搜索试听下载网站 网址：http://firstsfifteen-musics.eu5.org/ 这个试玩网站我使用的是 Freewha网站提供的第一种子域名绑定的虚拟主机 在freewha用子域名注册好虚拟主机；firstsfifteen-musics.eu5.org 通过ftp工具连接空间，删掉里面自带的代码文件； 上传源码到空间，进行调试，修改完善代码。 开源音乐源码：点此下载 （二）用oneindex程序结合onedrive微软提供的云存储服务搭建个人网盘 个人网盘：http://firstsfifteen-skydrive.eu5.org 个人网盘的搭建过程我专门写了一篇文章：点击查看原文 本次的记录分享就到这里。]]></content>
      <categories>
        <category>娱乐试验</category>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>免费域名</tag>
        <tag>虚拟主机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java关键字及其作用]]></title>
    <url>%2F2019%2F05%2F22%2Fjava%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Java关键字是电脑语言里事先定义的，有特别意义的标识符，有时又叫保留字，还有特别意义的变量。Java的关键字对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名和参数。 关键字总览: 大致含义 关键字 含义 abstract 表明类或者成员方法具有抽象属性 assert 断言，用来进行程序调试 boolean 基本数据类型之一，声明布尔类型的关键字 break 提前跳出一个块 byte 基本数据类型之一，字节类型 case 用在switch语句之中，表示其中的一个分支 catch 用在异常处理中，用来捕捉异常 char 基本数据类型之一，字符类型 class 声明一个类 const 保留关键字，没有具体含义 continue 回到一个块的开始处 default 默认，例如，用在switch语句中，表明一个默认的分支 do 用在do-while循环结构中 double 基本数据类型之一，双精度浮点数类型 else 用在条件语句中，表明当条件不成立时的分支 enum 枚举 extends 表明一个类型是另一个类型的子类型，这里常见的类型有类和接口 final 用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量 finally 用于处理异常情况，用来声明一个基本肯定会被执行到的语句块 float 基本数据类型之一，单精度浮点数类型 for 一种循环结构的引导词 goto 保留关键字，没有具体含义 if 条件语句的引导词 implements 表明一个类实现了给定的接口 import 表明要访问指定的类或包 instanceof 用来测试一个对象是否是指定类型的实例对象 int 基本数据类型之一，整数类型 interface 接口 long 基本数据类型之一，长整数类型 native 用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的 new 用来创建新实例对象 package 包 private 一种访问控制方式：私用模式 protected 一种访问控制方式：保护模式 public 一种访问控制方式：共用模式 return 从成员方法中返回数据 short 基本数据类型之一,短整数类型 static 表明具有静态属性 strictfp 用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范 [1] super 表明当前对象的父类型的引用或者父类型的构造方法 switch 分支语句结构的引导词 synchronized 表明一段代码需要同步执行 this 指向当前实例对象的引用 throw 抛出一个异常 throws 声明在当前定义的成员方法中所有需要抛出的异常 transient 声明不用序列化的成员域 try 尝试一个可能抛出异常的程序块 void 声明当前成员方法没有返回值 volatile 表明两个或者多个变量必须同步地发生变化 while 用在循环结构中 详细解释1. 访问控制1) private 私有的private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 只能在声明 private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 2) protected 受保护的protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明 protected 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 3) public 公共的public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 可能只会在其他任何类或包中引用 public 类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 2. 类、方法和变量修饰符1) abstract 声明抽象abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用 abstract方法的类本来就是抽象类，并且必须声明为abstract。 2) class类class 关键字用来声明新的 Java 类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。 3) extends 继承、扩展extends 关键字用在 class 或 interface 声明中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。 4) final 最终、不可改变final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是 abstract 又是 final。abstract 意味着必须扩展类，final 意味着不能扩展类。一个方法不能同时是 abstract 又是 final。abstract 意味着必须重写方法，final 意味着不能重写方法。 5) implements实现implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。 6) interface 接口interface 关键字用来声明新的 Java 接口，接口是方法的集合。 接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。 实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。 7) native 本地native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。 8) new 新,创建new 关键字用于创建类的新实例。 new 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。 参数集合必须与类的构造方法的签名匹配。 = 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。 9) static 静态static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 通常，static 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。 static（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的示例中，另一个类中的代码可以实例化 MyStaticClass 类，方法是用包含它的类名来限定其名称，如 MyClass.MyStaticClass。 static 字段（类的成员变量）在类的所有实例中只存在一次。 可以从类的外部调用 static 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。 模式：public final static varName = ; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的示例中，另一个类可以用 MyClass.MAX_OBJECTS 形式来引用 MAX_OBJECTS 常量。 10) strictfp 严格,精准strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。 可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字 11) synchronized线程、同步synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 synchronized 关键字可防止代码的关键代码段一次被多个线程执行。 如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。 如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。 如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。 12) transient 短暂transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。 当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。 Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。 transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。 13) volatile 易失volatile 关键字用于表示可以被多个线程异步修改的成员变量。 注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。 Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分 3. 程序控制语句1) break 跳出，中断break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 break 总是退出最深层的 while、for、do 或 switch 语句 2) continue 继续continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。 3) return 返回return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。 返回值两侧的括号是可选的。 4) do 运行do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 do 循环体至少执行一次。 条件表达式后面必须有分号。 5) while 循环while 关键字用于指定一个只要条件为真就会重复的循环。 6) if 如果if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。 if 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。 包含 boolean 操作数的表达式只能包含 boolean 操作数。 7) else 否则else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。 8) for 循环for 关键字用于指定一个在每次迭代结束前检查其条件的循环。 for 语句的形式为 for(initialize; condition; increment) 控件流进入 for 语句时，将执行一次 initialize 语句。 每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。 每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。 9) instanceof 实例instanceof 关键字用来确定对象所属的类。 10) switch 观察switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 switch 条件的计算结果必须等于 byte、char、short 或 int。 case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。 如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。 11) case 返回观察里的结果case 用来标记 switch 语句中的每个分支。 case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。 如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。 12) default 默认default 关键字用来标记 switch 语句中的默认分支。 default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。 如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。 4. 错误处理1) try 捕获异常try 关键字用于包含可能引发异常的语句块。 每个 try 块都必须至少有一个 catch 或 finally 子句。 如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。 2) catch 处理异常catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。 每个 try 块都必须至少有一个 catch 或 finally 子句。 如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息 3) throw 抛出一个异常对象throw 关键字用于引发异常。 throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。 引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。 4) throws 声明一个异常可能被抛出throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。 引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。 要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。 5. 包相关1) import 引入import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。 当多个包包含同名的类时，许多 Java 程序员只使用特定的 import 语句（没有“*”）来避免不确定性。 2) package 包package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。 package 语句（如果出现）必须是 Java 源文件中的第一个非注释性文本。 例:java.lang.Object。 如果 Java 源文件不包含 package 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。 6. 基本类型1) boolean 布尔型boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。 boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。 包含 boolean 操作数的表达式只能包含 boolean 操作数。 Boolean 类是 boolean 原始类型的包装对象类。 2) byte 字节型byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。 Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 3) char 字符型char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。 可以使用下列 char 常量：\b - 空格, \f - 换页, \n - 换行, \r - 回车, \t - 水平制表符, \’ - 单引号, \” - 双引号, \ - 反斜杠, \xxx - 采用 xxx 编码的 Latin-1 字符。\x 和 \xx 均为合法形式，但可能引起混淆。 \uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。 Character 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。 char 值没有符号。 4) double 双精度double 是 Java 原始类型。double 变量可以存储双精度浮点值。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。 5) float 浮点float 是 Java 原始类型。float 变量可以存储单精度浮点值。 使用此关键字时应遵循下列规则： Java 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。 6) int 整型int 是 Java 原始类型。int 变量可以存储 32 位的整数值。 Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 7) long 长整型long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。 Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 8) short 短整型short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。 Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。 Java 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。 9) null 空null 是 Java 的保留字，表示无值。 将 null 赋给非原始变量相当于释放该变量先前所引用的对象。 不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。 10) true 真true 关键字表示 boolean 变量的两个合法值中的一个。 11) false 假false 关键字代表 boolean 变量的两个合法值之一。 7. 变量引用1) super 父类,超类super 关键字用于引用使用该关键字的类的超类。 作为独立语句出现的 super 表示调用超类的构造方法。 super.() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。 2) this 本类this 关键字用于引用当前实例。 当引用可能不明确时，可以使用 this 关键字来引用当前的实例。 3) void 无返回值void 关键字表示 null 类型。 void 可以用作方法的返回类型，以指示该方法不返回值。 8. 保留字正确识别java语言的关键字（keyword）和保留字（reserved word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。const和goto是java的保留字。 所有的关键字都是小写 1) goto 跳转goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。 2) const 静态const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。 3) native 本地Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。 可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤： １、在Java中声明native()方法，然后编译； ２、用javah产生一个.h文件； ３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）； ４、将第三步的.cpp文件编译成动态链接库文件； ５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。 Java关键字abstractabstract关键字可以修改类或方法。 abstract类可以扩展（增加子类），但不能直接实例化。 abstract方法不在声明它的类中实现，但必须在某个子类中重写。 -示例- public abstract class MyClass{} public abstract String myMethod(); -注释- 采用abstract方法的类本来就是抽象类，并且必须声明为abstract。 abstract类不能实例化。 仅当abstract类的子类实现其超类的所有abstract方法时，才能实例化abstract类的子类。这种类称为具体类，以区别于abstract类。 如果abstract类的子类没有实现其超类的所有abstract方法，该子类也是abstract类。 abstract关键字不能应用于static、private或final方法，因为这些方法不能被重写，因此，不能在子类中实现。 final类的方法都不能是abstract，因为final类不能有子类。 booleanboolean变量的值可以是true或false。 -示例- boolean valid=true; if(valid){ } -注释- boolean变量只能以true或false作为值。 boolean不能与数字类型相互转换。 包含boolean操作数的表达式只能包含boolean操作数。 Boolean类是boolean原始类型的包装对象类。 break用于提前退出for、while或do循环，或者在switch语句中用来结束case块。 -示例- for(i=0;i&lt;max;i++){ if(){ break;}} inttype=; switch(type){ case1: break; case2: break; default: } -注释- break总是退出最深层的while、for、do或switch语句。 bytebyte是Java原始类型。 byte可存储在[-128,127]范围以内的整数值。 -示例- byteb=124; -注释- Byte类是byte原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。 Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。 case用来标记switch语句中的每个分支。 -示例- intarg=; switch(arg){ case1: break; case2: break; default: break;} -注释- case块没有隐式结束点。break语句通常在每个case块末尾使用，用于退出switch语句。 如果没有break语句，执行流将进入所有后面的case和/或default块。 catchcatch关键字用来在try-catch或try-catch-finally语句中定义异常处理块。 -示例- try{ &lt;可能引发异常的块&gt; } catch(&lt;java.lang.Exception或子类&gt;e){ &lt;处理异常e的代码&gt; } try{ &lt;可能引发其他异常的块&gt; } catch(FooExceptione){ &lt;处理FooExceptione的代码&gt; } catch(BarExceptione){ &lt;处理BarExceptione的代码&gt; } try{ &lt;可能引发异常的块&gt; } catch(&lt;java.lang.Exception或子类&gt;e){ &lt;处理异常e的代码&gt; } finally{ &lt;有异常或无异常情况下都执行的语句&gt; } -注释- 开始和结束标记{和}是catch子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。 每个try块都必须至少有一个catch或finally子句。 如果某个特定异常类未被任何catch子句处理，该异常将沿着调用栈递归地传播到下一个封闭try块。如果任何封闭try块都未捕获到异常，Java解释器将退出，并显示错误消息和堆栈跟踪信息。 charchar是Java原始类型。 char变量可以存储一个Unicode字符。 -示例- chardelimiter=’;’; -注释- 可以使用下列char常量： \b-空格 \f-换页 \n-换行 \r-回车 \t-水平制表符 \’-单引号 \”-双引号 \”-反斜杠 \xxx-采用xxx编码的Latin-1字符。\x和\xx均为合法形式，但可能引起混淆。 \uxxxx-采用十六进制编码xxxx的Unicode字符。 Character类包含一些可用来处理char变量的static方法，这些方法包括isDigit()、isLetter()、isWhitespace()和toUpperCase()。 char值没有符号。 classclass关键字用来声明新的Java类，该类是相关变量和/或方法的集合。 类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。 要使用类，通常使用new操作符将类的对象实例化，然后调用类的方法来访问类的功能。 -示例- public class Rectangle{ float width; float height; public Rectangle(floatw,floath){ width=w; height=h; } public float getWidth(){ returnwidth; } public float getHeight(){ return height; } } continuecontinue关键字用来跳转到for、while或do循环的下一个迭代。 -示例- for(i=0;i&lt;max;i++){ if(){ continue; } } -注释- continue总是跳到最深层while、for或do语句的下一个迭代。 defaultdefault关键字用来标记switch语句中的默认分支。 -示例- intarg=; switch(arg){ case1: break; case2: break; default: break; } -注释- default块没有隐式结束点。break语句通常在每个case或default块的末尾使用，以便在完成块时退出switch语句。 如果没有default语句，其参数与任何case块都不匹配的switch语句将不执行任何操作。 dodo关键字用于指定一个在每次迭代结束时检查其条件的循环。 -示例- do{ } while(!found); -注释- do循环体至少执行一次。 条件表达式后面必须有分号。 doubledouble是Java原始类型。 double变量可以存储双精度浮点值。 -示例- double ratio=.01; double diameter=6.15; double height=1.35E03;//1.35*103或1350.0 double height=1e-2;//1.0*10-2或0.01 -注释- 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java浮点数值可代表无穷大和NaN（非数值）。Double包装对象类用来定义常量MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY和NaN。 elseelse关键字总是在if-else语句中与if关键字结合使用。else子句是可选的，如果if条件为false，则执行该子句。 -示例- if(condition){ } else{ } extendsextends关键字用在class或interface声明中，用于指示所声明的类或接口是其名称后跟有extends关键字的类或接口的子类。 -示例- public class Rectangle extends Polygon{ } -注释- 在上例中，Rectangle类继承Polygon类的所有public和protected变量和方法。 Rectangle类可以重写Polygon类的任何非final方法。 一个类只能扩展一个其他类。 falsefalse关键字代表boolean变量的两个合法值之一。 -示例- boolean is Complete=false; finalfinal关键字可以应用于类，以指示不能扩展该类（不能有子类）。 final关键字可以应用于方法，以指示不能重写任何子类中的方法。 -示例- public final class MyFinalClass{ } public class MyClass{ public final String myFinal Method() { } } -注释- 一个类不能同时是abstract又是final。abstract意味着必须扩展类，final意味着不能扩展类。 一个方法不能同时是abstract又是final。abstract意味着必须重写方法，final意味着不能重写方法。 finallyfinally关键字用来定义始终在try-catch-finally语句中执行的块。 finally块通常包含清理代码，用在部分执行try块后恢复正常运行。 -示例- try{ &lt;可能引发异常的块&gt; } catch(&lt;java.lang.Exception或子类&gt;e){ &lt;处理异常e的代码&gt; } finally{ &lt;有异常或无异常情况下都执行的语句&gt; } -注释- 开始和结束标记{和}是finally子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。 每个try块都必须至少有一个catch或finally子句。 如果执行try块的任何部分，不论是否出现异常，也不论try或catch块是否包含return、continue或break语句，都一定会执行finally块中的代码。 如果不出现异常，控件将跳过try块，进入finally块。 如果在执行try块期间出现异常，并且相应的catch块包含break、continue或return语句，控件将首先穿过finally块，之后再执行break、continue或return。 floatfloat是Java原始类型。 float变量可以存储单精度浮点值。 -示例- float ratio=.01; float diameter=6.15; float height=1.35E03;//1.35*103或1350.0 float height=1e-2;//1.0*10-2或0.01 -注释- 使用此关键字时应遵循下列规则： Java中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上f或F，如0.01f。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。 Java浮点数值可代表无穷大和NaN（非数值）。Float包装对象类用来定义常量MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY和NaN。 forfor关键字用于指定一个在每次迭代结束前检查其条件的循环。 -示例- inti; for(i=0;i&lt;max;i++){ } -注释- for语句的形式为for(initialize;condition;increment) 控件流进入for语句时，将执行一次initialize语句。 每次执行循环体之前将计算condition的结果。如果condition为true，则执行循环体。 每次执行循环体之后，在计算下一个迭代的condition之前，将执行increment语句。 ifif关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。 -示例- if(condition){ } if(condition){ } else{ } -注释- if语句可以有可选的else子句，该子句包含条件为false时将执行的代码。 包含boolean操作数的表达式只能包含boolean操作数。 implementsimplements关键字在class声明中使用，以指示所声明的类提供了在implements关键字后面的名称所指定的接口中所声明的所有方法的实现。 -示例- public class Truck implements IVehicle{ } -注释- 在上例中，Truck类必须提供在IVehicle接口中所声明的所有方法的实现。 否则，Truck类将是独立的；它可以声明其他方法和变量，并扩展另一个类。 一个类可以实现多个接口。 importimport关键字使一个包中的一个或所有类在当前Java源文件中可见。可以不使用完全限定的类名来引用导入的类。 -示例- importjava.io.File; importjava.net.*; -注释- 当多个包包含同名的类时，许多Java程序员只使用特定的import语句（没有“*”）来避免不确定性。 instanceofinstanceof关键字用来确定对象所属的类。 -示例- if(node instanceof TreeNode){ } -注释- 在上例中，如果node是TreeNode类的实例，或者是TreeNode的子类的实例，则instanceof表达式的值将为true。 intint是Java原始类型。 int变量可以存储32位的整数值。 -示例- int number=5; int octal Number=0377; int hex Number=0xff; -注释- Integer类是int原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。 Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。 interfaceinterface关键字用来声明新的Java接口，接口是方法的集合。 接口是Java语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。 -示例- public interface IPolygon{ public float getArea(); public int getNumberOfSides(); public int getCircumference(); } -注释- 实现了接口的任何类都必须提供在该接口中的所有方法的实现。 一个类可以实现多个接口。 longlong是Java原始类型。 long变量可以存储64位的带符号整数。 -示例- longnumber=5; longanotherNumber=34590L; longoctalNumber=0377; longhexNumber=0xffl; -注释- Long类是long原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。 Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。 nativenative关键字可以应用于方法，以指示该方法是用Java以外的语言实现的。 -示例- native String getProcessorType(); -注释- Native方法不在此文档的讨论范围内。 newnew关键字用于创建类的新实例。 -示例- String sName=new String(); Float fVal=new Float(0.15); -注释- new关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。 参数集合必须与类的构造方法的签名匹配。 =左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。 nullnull是Java的保留字，表示无值。 -示例- Integeri; i=null; Strings; if(s!=null){ } -注释- 将null赋给非原始变量相当于释放该变量先前所引用的对象。 不能将null赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。 packagepackage关键字指定在Java源文件中声明的类所驻留的Java包。 -示例- package com.mycompany; public class MyClass{ } -注释- package语句（如果出现）必须是Java源文件中的第一个非-注释-性文本。 在上面的-示例-中，MyClass类的完全限定类名是com.mycompany.MyClass。 如果Java源文件不包含package语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。 privateprivate关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 -示例- public class MyPublicClass{ private class MyPrivateClass{ } private int i; private String myMethod(){ } } -注释- 只能在声明private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是package访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 protectedprotected关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 -示例- public class MyPublicClass{ protected class MyPrivateClass{ } protected int i; protected StringmyMethod(){ } } -注释- 可以在声明protected类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。 所有类成员的默认访问范围都是package访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 publicpublic关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 -示例- public class MyPublicClass{ public class MyPrivateClass{ } publicinti; public String myMethod(){ } } -注释- 可能只会在其他任何类或包中引用public类、方法或字段。 所有类成员的默认访问范围都是package访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。 returnreturn关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 -示例- public void myVoidMethod(){ return; } public String myStringMethod(){ Strings=”myresponse”; returns; } public int myIntMethod(){ inti=5; return(i); } -注释- 如果方法具有非void的返回类型，return语句必须具有相同或兼容类型的参数。 返回值两侧的括号是可选的。 shortshort是Java原始类型。 short变量可以存储16位带符号的整数。 -示例- short number=5; short octalNumber=0077; short hexNumber=0xff; -注释- Short类是short原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。 Java中的所有整数值都是32位的int值，除非值后面有l或L（如235L），这表示该值应解释为long。 staticstatic关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 -示例- public class MyPublicClass{ public final static int MAX_OBJECTS=100; static int_numObjects=0; static class MyStaticClass{ } static int getNumObjects(){ } } -注释- 通常，static关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。 static（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的-示例-中，另一个类中的代码可以实例化MyStaticClass类，方法是用包含它的类名来限定其名称，如MyClass.MyStaticClass。 static字段（类的成员变量）在类的所有实例中只存在一次。 可以从类的外部调用static方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。在上面的示例中，MyClass类外部的代码以MyClass.getNumObjects()的形式调用getNumObjects()static方法。 模式： publicfinalstaticvarName=; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的-示例-中，另一个类可以用MyClass.MAX_OBJECTS形式来引用MAX_OBJECTS常量。 supersuper关键字用于引用使用该关键字的类的超类。 -示例- public class MyClass{ public MyClass(Stringarg){ super(arg); } public String myStringMethod(){ return super.other String Method(); } } -注释- 作为独立语句出现的super表示调用超类的构造方法。 super.()表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。 switchswitch语句用于基于某个表达式选择执行多个代码块中的某一个。 -示例- intarg=; switch(arg){ case1: break; case2: break; default: break; } chararg=; switch(arg){ case’y’: case’Y’: break; case’n’: case’N’: break; default: break; } -注释- switch条件的计算结果必须等于byte、char、short或int，jdk1.7后可以是String类型。 case块没有隐式结束点。break语句通常在每个case块末尾使用，用于退出switch语句。 如果没有break语句，执行流将进入所有后面的case和/或default块。 synchronizedsynchronized关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 -示例- public class MyClass{ public synchronized static String mySyncStaticMethod(){ } public synchronized String mySyncMethod(){ } } public class MyOtherClass{ Object someObj; public String myMethod(){ synchronized(someObj){ } } } -注释- synchronized关键字可防止代码的关键代码段一次被多个线程执行。 如果应用于静态方法（如上例中的MySyncStaticMethod），那么，当该方法一次由一个线程执行时，整个类将被锁定。 如果应用于实例方法（如上例中的MySyncMethod），那么，当该方法一次由一个线程访问时，该实例将被锁定。 如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。 thisthis关键字用于引用当前实例。 -示例- public class MyClass{ int number; public MyClass(intnumber){ this.number=number; } } -注释- 当引用可能不明确时，可以使用this关键字来引用当前的实例。 在上面的-示例-中，构造方法参数number与类的成员变量同名。this.number明确表示MyClass的该实例的number成员变量。 throwthrow关键字用于引发异常。 -示例- import java.io.IOException; public class MyClass{ public method readFile(Stringfilename)throws IO Exception{ if(error){ throw new IO Exception(“errorreadingfile”); } } } -注释- throw语句将java.lang.Throwable作为参数。Throwable在调用栈中向上传播，直到被适当的catch块捕获。 引发非RuntimeException异常的任何方法还必须在方法声明中使用throws修饰符来声明它引发的异常。 throwsthrows关键字可以应用于方法，以便指出方法引发了特定类型的异常。 -示例- import java.io.IOException; public class MyClass{ public method readFile(Stringfilename)throwsIOException{ if(error){ throw new IO Exception(“errorreadingfile”); } } } -注释- throws关键字将逗号分隔的java.lang.Throwables列表作为参数。 引发非RuntimeException异常的任何方法还必须在方法声明中使用throws修饰符来声明它引发的异常。 要在try-catch块中包含带throws子句的方法的调用，必须提供该方法的调用者。 transienttransient关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。 -示例- public class MyClass{ private transient String password; } trytry关键字用于包含可能引发异常的语句块。 -示例- try{ &lt;可能引发异常的块&gt; } catch(&lt;java.lang.Exception或子类&gt;e){ &lt;处理异常e的代码&gt; } try{ &lt;可能引发其他异常的块&gt; } catch(FooExceptione){ &lt;处理FooExceptione的代码&gt; } catch(BarExceptione){ &lt;处理BarExceptione的代码&gt; } try{ &lt;可能引发异常的块&gt; } catch(&lt;java.lang.Exception或子类&gt;e){ &lt;处理异常e的代码&gt; } finally{ &lt;有异常或无异常情况下都执行的语句&gt; } -注释- 每个try块都必须至少有一个catch或finally子句。 如果某个特定异常类未被任何catch子句处理，该异常将沿着调用栈递归地传播到下一个封闭try块。如果任何封闭try块都未捕获到异常，Java解释器将退出，并显示错误消息和堆栈跟踪信息。 truetrue关键字表示boolean变量的两个合法值中的一个。 -示例- boolean is Complete=true; voidvoid关键字表示null类型。 -示例- public class MyClass{ public void do Something(){ return; } } -注释- void可以用作方法的返回类型，以指示该方法不返回值。 volatilevolatile关键字用于表示可以被多个线程异步修改的成员变量。 注意：volatile关键字在许多Java虚拟机中都没有实现。 -示例- public class MyClass{ volatile int shared Value; } -注释- volatile的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。 whilewhile关键字用于指定一个只要条件为真就会重复的循环。 -示例- while(!found){ }]]></content>
      <categories>
        <category>java编程学习第一季</category>
      </categories>
      <tags>
        <tag>java关键字</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[onedrive搭建个人网盘]]></title>
    <url>%2F2019%2F05%2F20%2Fonedrive%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98%2F</url>
    <content type="text"><![CDATA[本文主要记录一下我搭建onedrive网盘的方法： 我的网盘地址：点击访问：http://firstsfifteen-skydrive.eu5.org OneIndex是针对Onedrive网盘的一个开源程序。 可以将Onedrive存储的文件进行展示，直链下载； 这个网盘可以用来当图床，播放视频音乐，快速下载资料等； 不用服务器空间，不走服务器流量！ 准备材料： onedrive账号; 直接淘宝购买5T容量onedrive账号 个人网站（域名 + 服务器空间）； 任意能运行oneindex源码的 php的空间 （我选择了免费子域名托管的虚拟主机freewha | 域名和空间自动绑定托管在freewha服务器，注册成功后就可以通过ftp上传程序源码，然后子域名访问网站，） ondindex源码。 oneindex源码：点击下载 项目原地址：https://github.com/donwa/oneindex。 搭建步骤：（一）通过FTP工具连接到的服务器空间: 我使用的是8uftp工具，上传速度比较慢。 输入空间的FTP地址、用户名、密码，然后连接 将下载解压好的oneindex源码，从左侧拖到右侧即可进行上传。 （二）浏览器中输入域名，然后进行程序的安装 修改权限 这里需要到FTP工具中找到config和cache文件修改其读写属性 点击下图的获取应用id和机密 和微软onedrive账号进行绑定 到这里安装的就差不多了，接下来会有管理后台密码的设置，完成后就可以使用了。 onedrive的使用平时可以将文件或者分享的东西存到onedrive里，通过登录网站后台刷新页面缓存（最好是写一个crontab脚本传入网站目录来自动定时刷新缓存），就可以通过域名在网站里直接查看、下载、分享文件了。 主题推荐：nexmoe； 可以编写HEAD.md 和README.md 文档，存入onedrive的根目录，来对网站内容进行修饰描述； 文件夹加密**： 在ondrive想要加密的文件夹中添加 .password文件，文件中填写想设置的密码。以后通过网站访问带.password 的文件夹时就需要通过密码访问。 Github账号登录评论功能： 参考资源库resource的博客 。]]></content>
      <categories>
        <category>娱乐试验</category>
        <category>教程记录</category>
      </categories>
      <tags>
        <tag>个人网盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客的美化]]></title>
    <url>%2F2019%2F05%2F17%2FHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[hexo中共有二百多款主题，目前next主题使用人数较多，界面简洁、舒适，内含插件多，总之体验非常棒。今天主要写一些Next主题中的一些配置： 一、使用next主题 两种安装方式： 克隆next主题到目标目录 1git clone https://github.com/iissnan/hexo-theme-next themes/next next发布界面下载，然后移动到themes目录下 启用主题： 与所有 Hexo 主题启用的模式一样。 当 克隆 / 下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 1theme: next 二、 next中添加功能 来必力评论(LiveRe): [ ] 获取来必力id： 登陆 来必力 注册; 注册后点击导航上边的安装，选择免费的city版本 ; 点击安装后填入网站的一些信息就可以获取到安装代码，框中的就是你的来必力id： 复制上边的id，在主题配置文件里面搜livere_uid，在后面添加来必力id即可： 文章的字数统计和浏览时间，全站字数（卜算子busuanzi）： 安装hexo-wordcount插件，git bash在网站根目录安装 1$ npm install hexo-wordcount --save 用于统计文章的字数以及分析出阅读时间。 在主题配置文件中，搜索wordcount，设置为下面这样就可以了： 1234567# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true min2read: true wordcount: true separated_meta: true 文章的访问人数（leancloud） 相比不蒜子的统计，LeanCloud的文章阅读量统计更加稳定靠谱，所以本人也把网站的文章内统计改为LeanCloud的了。设置方法参考—该文章。 文章末尾的微信公众号和打赏 在主题配置文件中的微信or支付宝收款地址处填入收款二维码图片即可： 1234567891011# Rewardreward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /images/weixinapply.jpg //也可以写入图床地址#alipay: /images/alipay.jpg#bitcoin: /images/bitcoin.png# Wechat Subscriberwechat_subscriber: enabled: true qcode: /images/gongzhonghao.jpg description: 欢迎订阅我的微信公众号！ 文章的评分和分享 通过widgetpack来给网站每篇文章添加评分系统 首先注册账号，添加新站点，填入网站名称和域名地址，点击添加。 获取id 在主题中添加id 123456# Star rating support to each article.# To get your ID visit https://widgetpack.comrating: enable: true id: &#123;your ID&#125; //输入你的&lt;app_id&gt; color: fc6423 设置主题中的needmoreshare2: 来进行文章的分享： 123456789needmoreshare2: enable: true postbottom: enable: true options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Twitter,Facebook,Evernote,Douban 侧边栏的联系方式和友情链接 直接在主题的配置文件中添加即可： 12345678910111213141516171819202122232425262728social: //社交 GitHub: https://github.com/firstsfifteen || github #E-Mail: mailto:firstsfifteen@gmail.com || envelope Weibo: https://weibo.com/u/6405322252 || weibo CSDN: https://i.csdn.net/#/uc/profile || copyright 知乎: https://www.zhihu.com/people/zhi-jian-47-13 || key #Google: https://plus.google.com/yourname || google 个人网盘: http://firstsfifteen.eu5.org || cloud Twitter: https://mobile.twitter.com/JFPmSyvttaFwHmd || twitter FB Page: https://www.facebook.com/profile.php?id=100031711572654 || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow social_icons: enable: true icons_only: false transition: true links_icon: link // 友情链接 links_title: 友情链接links_layout: block#links_layout: inlinelinks: V2EX: https://www.v2ex.com/ 哔哩哔哩: https://www.bilibili.com/ 网易云音乐: https://music.163.com/ 咪咕鱼导航: http://www.miguyu.com/]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>博客美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客中添加音乐和视频]]></title>
    <url>%2F2019%2F05%2F16%2F%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[一、博客站点添加音乐播放器因为我们搭建的hexo为静态博客，看起来比较枯燥，不过我们可 以通过一些配置来美化我们的博客，这部分内容主要讲一下在主页的侧边栏引入音乐播放： 我这里选用的是网易云音乐的外链来实现，其他的音乐也类似： 登录网页版的网易云音乐，选择一首歌曲或者多首歌曲到歌单，点击生成外链播放器，本播放器没有版权的歌是不能生成外链的； 选择iframe插件，自定义设置外链，然后点击复制代码； 将外链插入到~/themes/next-recent/layout/_macro/sidebar.swig中，比如我想把外链播放器放在侧边栏链接的下方； 最后在博客中的效果： 二、文章中添加音乐和视频播放器同理，还是采用外链的方式，不过在博客文章里引入音乐或者视频更加简单，直接黏贴外链代码到目标位置就可以了，测试如下： 1. 添加音乐到文章 起风了（原始版）（Cover：买辣椒也用券）,下方为我选择的这首歌的外链源码和外链播放器： 1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id=1340175443&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt; [x] 2. 添加视频到文章 像优酷、土豆、腾讯视频、爱奇艺、哔哩哔哩等都支持视频外链,上传视频后,点击分享按钮,就能找到视频外链链接； bilibili片头没广告，太有良心了有木有~，就拿B站复制外链来举例 黏贴链接到目标位置 买辣椒也用券 —《起风了》MV 的视频外链和外链播放器： 1&lt;iframe src="//player.bilibili.com/player.html?aid=39293155&amp;cid=69050275&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt; B站复制过来的外链，需要高度和高度来控制播放器的尺寸，我添加了width=500 height=400 这个起风了mv是放在我用onedrive搭建的网盘中的，所以读取速度很慢； MV外链和外链播放器如下： 1&lt;video&gt;&lt;source src="http://firstsfifteen.eu5.org/?/%E8%A7%86%E9%A2%91/MV/%E3%80%8A%E8%B5%B7%E9%A3%8E%E4%BA%86%E3%80%8B.mp4"type="video/mp4"&gt;&lt;/video&gt; &lt;source src=”http://firstsfifteen.eu5.org/?/%E8%A7%86%E9%A2%91/MV/%E3%80%8A%E8%B5%B7%E9%A3%8E%E4%BA%86%E3%80%8B.mp4&quot;type=&quot;video/mp4&quot;&gt; 本次测试内容就到这里，仅供娱乐！]]></content>
      <categories>
        <category>娱乐试验</category>
      </categories>
      <tags>
        <tag>小测试</tag>
        <tag>hexo配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图床]]></title>
    <url>%2F2019%2F05%2F16%2F%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[这两天兴致勃勃的用hexo搭建好了博客系统，并部署到了github和conding两个托管平台： [x] https://firstsfifteen.github.io/ [x] https://firstsfifteen.coding.me/ 正式开始记录博文的时候，才发现在markdown中，需要找一个网络云盘，也就是图床来存储图片，这样可以简化写作流程，同时使用图床可以节约自己服务器的空间。 一、付费版：国内的 七牛云 、腾讯 、阿里…. 国外的 AWS 、cloudinary…. 我目前只实名认证了七牛云，注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云是国内专业CDN服务商，插件支持比较多 二、免费版像简书，CSDN，新浪等平台的图床，还有一些大佬自己维护的图床站点都很不错，这里记录一下我用到的几款 1. 简书 简书网站上上传图片，图片会自动保存在简书图床，只有链接，无法后续操作 2. 新浪图床使用的是微博相册功能，只要有微博账号就可以免费使用图床功能了 容量流量无限； 图片尺寸:默认缩略图与原图； 访问速度快; 登录微博网站上传 / Chrome有第三方插件 [x] Chrome有第三方插件实现方法： 参考图床on微博,在chrome浏览器导入插件，开启插件，登录微博就可以在框里上传图片，就可以复制链接了。 3. 路过图床 高速稳定的图片上传和外链服务 全球CDN加速, 最大单张支持 10 MB 图片尺寸可编辑 4. SM.MS 永久存储免注册，图片链接支持https 每个图片最大5M， 上传不支持更改尺寸 5. TinypicPhotobucket旗下网站，上传的图片都是公开的，可上传视频。 容量流量无限； 可以选择上传尺寸 图片三个月若无人浏览即删除； 6. GitHubGitHub是一个面向开源及私有软件项目的托管平台，库的大小没有限制，但推荐1G以内。 容量流量无限； 访问速度：慢，GitHub服务器都在国外 三、 个人网盘 用onedrive搭建，实现了图床功能。 5T空间 支持图片、视频 访问速度慢 1地球图片的个人网盘链接： http://firstsfifteen.eu5.org/?/img/z.jpg 总结综合评分： 七牛云： 五星 微博相册 : 四星半 路过图床： 四星 简书： 三星半 SM.MS: 三星半 Tinypic: 三星半 GitHub： 三星 如果对图床性能要求不大的话，几款免费版的也能满足日常使用了。]]></content>
      <categories>
        <category>娱乐试验</category>
      </categories>
      <tags>
        <tag>小测试</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客的搭建]]></title>
    <url>%2F2019%2F05%2F15%2FHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、配置环境 打开 node.js和 Git 官网，下载并安装Git和node。 安转一直点击下一步即可。 打开cmd命令行，输入代码查看node.js和Git环境是否安装成功： 12node -vgit --version 安装成功后会显示当前版本，如图 二、安装Hexo 在命令行输入如下代码，进行hexo的安装： 1npm install -g hexo -cli 输入hexo -v，检查hexo是否安装成功： Hexo安装完成后，就可以在目录下依次执行以下命令: 123hexo init &lt;folder&gt; //&lt;folder&gt;为自定义的文件夹名cd &lt;folder&gt;npm install 输入hexo init 文件夹名，初始化文件夹 在博客目录下输入npm install，安装所需要的组件 三、 测试Hexo 输入hexo g，生成静态文件，首次体验Hexo； 输入hexo s，开启服务器，访问该网址，就可以体验Hexo了； 开启服务器 浏览器中输入localhost:4000，便可以访问静态博客页面了 在命令行输入ctrl+c，根据提示输入Y，就可以停止服务器。 四、 Hexo部署到服务器上Hexo 提供了快速方便的一键部署功能，只需一条命令就能将网站部署到服务器上。下面分别介绍将Hexo部署到Github和Coding上。 (一)、Hexo部署到Github 登录github官网，注册Github账号； GitHub中创建个人仓库；创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是，其中xxx就是你注册GitHub的用户名。这里我已经创建过了。 生成SSH添加到GitHub 回到你的gitbash中 12git config --global user.name "yourname" git config --global user.email "youremail" 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 然后创建SSH,一路回车 1ssh -keygen -t rsa -C "youremail" 这个时候它会告诉你已经生成了.ssh的文件夹.ssh，简单来讲，就是一个秘钥，id_rsa.pub是公共秘钥，把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，添加以下代码，修改YourgithubName为你的GitHub账户昵称。 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 在生成以及部署文章之前，需要安装一个扩展： 1npm install hexo-deployer-git --save 在每次更新博客目录内容后，可以依次输入以下命令将其部署到GitHub 123hexo cleanhexo generate //可简写为 hexo ghexo deploy // hexo d 等部署成功后，就可以在http://yourname.github.io 这个网站刷新查看你的博客了！！ （二）、Hexo部署到Coding 登录腾讯云开发者平台，注册账号； 进入控制台，新建项目： 添加公钥 查看项目的HTTPS链接： 将hexo和Coding关联起来，打开站点配置文件 _config.yml，添加自己Coding仓库的链接： 每次更新博客目录内容后，可以依次输入以下命令将其部署到Coding123hexo cleanhexo generate //可简写为 hexo ghexo deploy // hexo d 等部署成功后，就可以在http://yourname.coding.me 这个网站刷新查看你的博客了！！ 五、 Hexo的基本配置在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官访文档 。 站点配置 切换主题 Hexo常用命令 新建一篇文章 1hexo new "my blog" 生成静态文件 1hexo generate //简写 hexo g 部署网站 1hexo deploy //简写 hexo d Hexo插件安装 1例如：安装Git插件 npm install hexo-deployer-git --save]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FirstBlog]]></title>
    <url>%2F2019%2F05%2F13%2FFirst-Blog%2F</url>
    <content type="text"><![CDATA[你好这是我的第一篇文章]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>first</tag>
      </tags>
  </entry>
</search>
